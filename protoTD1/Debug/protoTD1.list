
protoTD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f38  08003f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f38  08003f38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f38  08003f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003f4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003f4c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f0  00000000  00000000  0002a302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143bc  00000000  00000000  0002cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b218  00000000  00000000  0004113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f6f0  00000000  00000000  0004c354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cba44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000cba98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ef0 	.word	0x08003ef0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ef0 	.word	0x08003ef0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb68 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f96e 	bl	80004b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f8fc 	bl	80003d4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001dc:	f000 f86c 	bl	80002b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //start PWM servo
  HAL_TIM_Base_Start(&htim1);
 80001e0:	4807      	ldr	r0, [pc, #28]	; (8000200 <main+0x38>)
 80001e2:	f002 f95d 	bl	80024a0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80001e6:	210c      	movs	r1, #12
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <main+0x38>)
 80001ea:	f002 f9fd 	bl	80025e8 <HAL_TIM_PWM_Start>

  //start reading frequency
  HAL_TIM_Base_Start(&htim2);
 80001ee:	4805      	ldr	r0, [pc, #20]	; (8000204 <main+0x3c>)
 80001f0:	f002 f956 	bl	80024a0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80001f4:	2100      	movs	r1, #0
 80001f6:	4803      	ldr	r0, [pc, #12]	; (8000204 <main+0x3c>)
 80001f8:	f002 fb3e 	bl	8002878 <HAL_TIM_IC_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1){
 80001fc:	e7fe      	b.n	80001fc <main+0x34>
 80001fe:	bf00      	nop
 8000200:	2000003c 	.word	0x2000003c
 8000204:	20000088 	.word	0x20000088

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09c      	sub	sp, #112	; 0x70
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fe62 	bl	8003ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2230      	movs	r2, #48	; 0x30
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 fe54 	bl	8003ee0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000238:	2302      	movs	r3, #2
 800023a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000240:	2310      	movs	r3, #16
 8000242:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000244:	2300      	movs	r3, #0
 8000246:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fe29 	bl	8000ea4 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000258:	f000 f9e8 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000260:	2300      	movs	r3, #0
 8000262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fd1c 	bl	8001cb4 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000282:	f000 f9d3 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f001 ff28 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800029e:	f000 f9c5 	bl	800062c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002a2:	2200      	movs	r2, #0
 80002a4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80002a8:	2000      	movs	r0, #0
 80002aa:	f001 fe7f 	bl	8001fac <HAL_RCC_MCOConfig>
}
 80002ae:	bf00      	nop
 80002b0:	3770      	adds	r7, #112	; 0x70
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b096      	sub	sp, #88	; 0x58
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	222c      	movs	r2, #44	; 0x2c
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 fdfb 	bl	8003ee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ea:	4b38      	ldr	r3, [pc, #224]	; (80003cc <MX_TIM1_Init+0x114>)
 80002ec:	4a38      	ldr	r2, [pc, #224]	; (80003d0 <MX_TIM1_Init+0x118>)
 80002ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80002f0:	4b36      	ldr	r3, [pc, #216]	; (80003cc <MX_TIM1_Init+0x114>)
 80002f2:	2204      	movs	r2, #4
 80002f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b35      	ldr	r3, [pc, #212]	; (80003cc <MX_TIM1_Init+0x114>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31999;
 80002fc:	4b33      	ldr	r3, [pc, #204]	; (80003cc <MX_TIM1_Init+0x114>)
 80002fe:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000302:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b31      	ldr	r3, [pc, #196]	; (80003cc <MX_TIM1_Init+0x114>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <MX_TIM1_Init+0x114>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <MX_TIM1_Init+0x114>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <MX_TIM1_Init+0x114>)
 8000318:	f002 f90e 	bl	8002538 <HAL_TIM_PWM_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f983 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000332:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000336:	4619      	mov	r1, r3
 8000338:	4824      	ldr	r0, [pc, #144]	; (80003cc <MX_TIM1_Init+0x114>)
 800033a:	f003 fcb1 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000344:	f000 f972 	bl	800062c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000348:	2360      	movs	r3, #96	; 0x60
 800034a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000350:	2300      	movs	r3, #0
 8000352:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000354:	2300      	movs	r3, #0
 8000356:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800035c:	2300      	movs	r3, #0
 800035e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000364:	220c      	movs	r2, #12
 8000366:	4619      	mov	r1, r3
 8000368:	4818      	ldr	r0, [pc, #96]	; (80003cc <MX_TIM1_Init+0x114>)
 800036a:	f002 fd6f 	bl	8002e4c <HAL_TIM_PWM_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000374:	f000 f95a 	bl	800062c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800039a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800039e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <MX_TIM1_Init+0x114>)
 80003ae:	f003 fcdd 	bl	8003d6c <HAL_TIMEx_ConfigBreakDeadTime>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80003b8:	f000 f938 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <MX_TIM1_Init+0x114>)
 80003be:	f000 f9c7 	bl	8000750 <HAL_TIM_MspPostInit>

}
 80003c2:	bf00      	nop
 80003c4:	3758      	adds	r7, #88	; 0x58
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000003c 	.word	0x2000003c
 80003d0:	40012c00 	.word	0x40012c00

080003d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08c      	sub	sp, #48	; 0x30
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003da:	f107 0320 	add.w	r3, r7, #32
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000400:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_TIM2_Init+0xdc>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000416:	f04f 32ff 	mov.w	r2, #4294967295
 800041a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041c:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <MX_TIM2_Init+0xdc>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000422:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000428:	4821      	ldr	r0, [pc, #132]	; (80004b0 <MX_TIM2_Init+0xdc>)
 800042a:	f001 ffe1 	bl	80023f0 <HAL_TIM_Base_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000434:	f000 f8fa 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800043c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800043e:	f107 0320 	add.w	r3, r7, #32
 8000442:	4619      	mov	r1, r3
 8000444:	481a      	ldr	r0, [pc, #104]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000446:	f002 fe15 	bl	8003074 <HAL_TIM_ConfigClockSource>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000450:	f000 f8ec 	bl	800062c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000454:	4816      	ldr	r0, [pc, #88]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000456:	f002 f9ad 	bl	80027b4 <HAL_TIM_IC_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000460:	f000 f8e4 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	480f      	ldr	r0, [pc, #60]	; (80004b0 <MX_TIM2_Init+0xdc>)
 8000474:	f003 fc14 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800047e:	f000 f8d5 	bl	800062c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000486:	2301      	movs	r3, #1
 8000488:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_TIM2_Init+0xdc>)
 800049a:	f002 fc3a 	bl	8002d12 <HAL_TIM_IC_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004a4:	f000 f8c2 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3730      	adds	r7, #48	; 0x30
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000088 	.word	0x20000088

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	4b26      	ldr	r3, [pc, #152]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a25      	ldr	r2, [pc, #148]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b23      	ldr	r3, [pc, #140]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_GPIO_Init+0xb0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a19      	ldr	r2, [pc, #100]	; (8000564 <MX_GPIO_Init+0xb0>)
 8000500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_GPIO_Init+0xb0>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2108      	movs	r1, #8
 8000516:	4814      	ldr	r0, [pc, #80]	; (8000568 <MX_GPIO_Init+0xb4>)
 8000518:	f000 fcac 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800051c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4619      	mov	r1, r3
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f000 fb28 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000540:	2308      	movs	r3, #8
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_GPIO_Init+0xb4>)
 8000558:	f000 fb1a 	bl	8000b90 <HAL_GPIO_Init>

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400

0800056c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7f1b      	ldrb	r3, [r3, #28]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d147      	bne.n	800060c <HAL_TIM_IC_CaptureCallback+0xa0>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10a      	bne.n	800059a <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000584:	2100      	movs	r1, #0
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f002 fe3e 	bl	8003208 <HAL_TIM_ReadCapturedValue>
 800058c:	4603      	mov	r3, r0
 800058e:	4a22      	ldr	r2, [pc, #136]	; (8000618 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000590:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8000598:	e038      	b.n	800060c <HAL_TIM_IC_CaptureCallback+0xa0>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800059a:	2100      	movs	r1, #0
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f002 fe33 	bl	8003208 <HAL_TIM_ReadCapturedValue>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005a6:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <HAL_TIM_IC_CaptureCallback+0xac>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d907      	bls.n	80005c4 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_TIM_IC_CaptureCallback+0xac>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	e00d      	b.n	80005e0 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_TIM_IC_CaptureCallback+0xac>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d907      	bls.n	80005e0 <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_TIM_IC_CaptureCallback+0xac>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	3b01      	subs	r3, #1
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005de:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80005e2:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80005f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005fa:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000034 	.word	0x20000034
 8000618:	20000028 	.word	0x20000028
 800061c:	2000002c 	.word	0x2000002c
 8000620:	20000030 	.word	0x20000030
 8000624:	4af42400 	.word	0x4af42400
 8000628:	20000038 	.word	0x20000038

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_TIM_PWM_MspInit+0x38>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d10b      	bne.n	80006aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_TIM_PWM_MspInit+0x3c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <HAL_TIM_PWM_MspInit+0x3c>)
 8000698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <HAL_TIM_PWM_MspInit+0x3c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40012c00 	.word	0x40012c00
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e0:	d130      	bne.n	8000744 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_TIM_Base_MspInit+0x8c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a19      	ldr	r2, [pc, #100]	; (800074c <HAL_TIM_Base_MspInit+0x8c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_TIM_Base_MspInit+0x8c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_TIM_Base_MspInit+0x8c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <HAL_TIM_Base_MspInit+0x8c>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_TIM_Base_MspInit+0x8c>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000722:	2301      	movs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f000 fa2e 	bl	8000b90 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	201c      	movs	r0, #28
 800073a:	f000 f9f2 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800073e:	201c      	movs	r0, #28
 8000740:	f000 fa0b 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <HAL_TIM_MspPostInit+0x68>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d11d      	bne.n	80007ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_TIM_MspPostInit+0x6c>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <HAL_TIM_MspPostInit+0x6c>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_TIM_MspPostInit+0x6c>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800078a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800078e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800079c:	230b      	movs	r3, #11
 800079e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 f9f1 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	40021000 	.word	0x40021000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f88e 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM2_IRQHandler+0x10>)
 800081a:	f002 f95b 	bl	8002ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000088 	.word	0x20000088

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <SystemInit+0x20>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <SystemInit+0x20>)
 8000834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800084c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000884 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490e      	ldr	r1, [pc, #56]	; (800088c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0b      	ldr	r4, [pc, #44]	; (8000898 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000876:	f7ff ffd7 	bl	8000828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087a:	f003 fb0d 	bl	8003e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087e:	f7ff fca3 	bl	80001c8 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000884:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000890:	08003f40 	.word	0x08003f40
  ldr r2, =_sbss
 8000894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000898:	200000d8 	.word	0x200000d8

0800089c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f92b 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff febc 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f943 	bl	8000b76 <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f90b 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x20>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x24>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_IncTick+0x24>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008
 8000950:	200000d4 	.word	0x200000d4

08000954 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;  
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_GetTick+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	200000d4 	.word	0x200000d4

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff31 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e14e      	b.n	8000e3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8140 	beq.w	8000e38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d005      	beq.n	8000bd0 <HAL_GPIO_Init+0x40>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d130      	bne.n	8000c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c06:	2201      	movs	r2, #1
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	091b      	lsrs	r3, r3, #4
 8000c1c:	f003 0201 	and.w	r2, r3, #1
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d017      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d123      	bne.n	8000cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3208      	adds	r2, #8
 8000c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	220f      	movs	r2, #15
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	6939      	ldr	r1, [r7, #16]
 8000cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0203 	and.w	r2, r3, #3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809a 	beq.w	8000e38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a54      	ldr	r2, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d1c:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a46      	ldr	r2, [pc, #280]	; (8000e64 <HAL_GPIO_Init+0x2d4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_Init+0x1dc>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a45      	ldr	r2, [pc, #276]	; (8000e68 <HAL_GPIO_Init+0x2d8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x1d8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a44      	ldr	r2, [pc, #272]	; (8000e6c <HAL_GPIO_Init+0x2dc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_Init+0x1d4>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x1e2>
 8000d64:	2305      	movs	r3, #5
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_Init+0x1e2>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x1e2>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_Init+0x1e2>
 8000d70:	2300      	movs	r3, #0
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d82:	4937      	ldr	r1, [pc, #220]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d90:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db4:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f47f aea9 	bne.w	8000ba0 <HAL_GPIO_Init+0x10>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	48000400 	.word	0x48000400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f000 bef4 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 816a 	beq.w	80011a2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ece:	4bb3      	ldr	r3, [pc, #716]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d00c      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eda:	4bb0      	ldr	r3, [pc, #704]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d159      	bne.n	8000f9a <HAL_RCC_OscConfig+0xf6>
 8000ee6:	4bad      	ldr	r3, [pc, #692]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d152      	bne.n	8000f9a <HAL_RCC_OscConfig+0xf6>
 8000ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f00:	fa93 f3a3 	rbit	r3, r3
 8000f04:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x82>
 8000f20:	4b9e      	ldr	r3, [pc, #632]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0xae>
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f42:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f4e:	4b93      	ldr	r3, [pc, #588]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f56:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f5e:	fa92 f2a2 	rbit	r2, r2
 8000f62:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f66:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f6a:	fab2 f282 	clz	r2, r2
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	f002 021f 	and.w	r2, r2, #31
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 810c 	beq.w	80011a0 <HAL_RCC_OscConfig+0x2fc>
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 8106 	bne.w	80011a0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f000 be86 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa4:	d106      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x110>
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7c      	ldr	r2, [pc, #496]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e030      	b.n	8001016 <HAL_RCC_OscConfig+0x172>
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x134>
 8000fbe:	4b77      	ldr	r3, [pc, #476]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a76      	ldr	r2, [pc, #472]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b74      	ldr	r3, [pc, #464]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a73      	ldr	r2, [pc, #460]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e01e      	b.n	8001016 <HAL_RCC_OscConfig+0x172>
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe2:	d10c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x15a>
 8000fe4:	4b6d      	ldr	r3, [pc, #436]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a6c      	ldr	r2, [pc, #432]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b6a      	ldr	r3, [pc, #424]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a69      	ldr	r2, [pc, #420]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e00b      	b.n	8001016 <HAL_RCC_OscConfig+0x172>
 8000ffe:	4b67      	ldr	r3, [pc, #412]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a66      	ldr	r2, [pc, #408]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b64      	ldr	r3, [pc, #400]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a63      	ldr	r2, [pc, #396]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001014:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001016:	4b61      	ldr	r3, [pc, #388]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	f023 020f 	bic.w	r2, r3, #15
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	495d      	ldr	r1, [pc, #372]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001026:	4313      	orrs	r3, r2
 8001028:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d059      	beq.n	80010e8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fc8e 	bl	8000954 <HAL_GetTick>
 8001038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103e:	f7ff fc89 	bl	8000954 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d902      	bls.n	8001054 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	f000 be29 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>
 8001054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001058:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001068:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d102      	bne.n	8001086 <HAL_RCC_OscConfig+0x1e2>
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	e015      	b.n	80010b2 <HAL_RCC_OscConfig+0x20e>
 8001086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800109a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010be:	fa92 f2a2 	rbit	r2, r2
 80010c2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010c6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010ca:	fab2 f282 	clz	r2, r2
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f002 021f 	and.w	r2, r2, #31
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0ab      	beq.n	800103e <HAL_RCC_OscConfig+0x19a>
 80010e6:	e05c      	b.n	80011a2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc34 	bl	8000954 <HAL_GetTick>
 80010ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f0:	e00a      	b.n	8001108 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f2:	f7ff fc2f 	bl	8000954 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d902      	bls.n	8001108 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	f000 bdcf 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800111c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <HAL_RCC_OscConfig+0x296>
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x2c2>
 800113a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800114e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001152:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001156:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_RCC_OscConfig+0x2f8>)
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800116a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800116e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800117a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ab      	bne.n	80010f2 <HAL_RCC_OscConfig+0x24e>
 800119a:	e002      	b.n	80011a2 <HAL_RCC_OscConfig+0x2fe>
 800119c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 816f 	beq.w	8001490 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011b2:	4bd0      	ldr	r3, [pc, #832]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011be:	4bcd      	ldr	r3, [pc, #820]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d16c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x400>
 80011ca:	4bca      	ldr	r3, [pc, #808]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d166      	bne.n	80012a4 <HAL_RCC_OscConfig+0x400>
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <HAL_RCC_OscConfig+0x362>
 8001200:	4bbc      	ldr	r3, [pc, #752]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	e013      	b.n	800122e <HAL_RCC_OscConfig+0x38a>
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800121e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800122a:	4bb2      	ldr	r3, [pc, #712]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	2202      	movs	r2, #2
 8001230:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001234:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001238:	fa92 f2a2 	rbit	r2, r2
 800123c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001240:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001244:	fab2 f282 	clz	r2, r2
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	f042 0220 	orr.w	r2, r2, #32
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f002 021f 	and.w	r2, r2, #31
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_RCC_OscConfig+0x3cc>
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d002      	beq.n	8001270 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	f000 bd1b 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4ba0      	ldr	r3, [pc, #640]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	21f8      	movs	r1, #248	; 0xf8
 8001280:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001288:	fa91 f1a1 	rbit	r1, r1
 800128c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001290:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001294:	fab1 f181 	clz	r1, r1
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	408b      	lsls	r3, r1
 800129c:	4995      	ldr	r1, [pc, #596]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	e0f5      	b.n	8001490 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8085 	beq.w	80013ba <HAL_RCC_OscConfig+0x516>
 80012b0:	2301      	movs	r3, #1
 80012b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	461a      	mov	r2, r3
 80012d8:	2301      	movs	r3, #1
 80012da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb3a 	bl	8000954 <HAL_GetTick>
 80012e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fb35 	bl	8000954 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d902      	bls.n	80012fc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f000 bcd5 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800130e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d102      	bne.n	800132c <HAL_RCC_OscConfig+0x488>
 8001326:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e013      	b.n	8001354 <HAL_RCC_OscConfig+0x4b0>
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001344:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001350:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2202      	movs	r2, #2
 8001356:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800135a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800135e:	fa92 f2a2 	rbit	r2, r2
 8001362:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001366:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f042 0220 	orr.w	r2, r2, #32
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f002 021f 	and.w	r2, r2, #31
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0af      	beq.n	80012e6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	21f8      	movs	r1, #248	; 0xf8
 8001396:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800139e:	fa91 f1a1 	rbit	r1, r1
 80013a2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013a6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013aa:	fab1 f181 	clz	r1, r1
 80013ae:	b2c9      	uxtb	r1, r1
 80013b0:	408b      	lsls	r3, r1
 80013b2:	4950      	ldr	r1, [pc, #320]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e06a      	b.n	8001490 <HAL_RCC_OscConfig+0x5ec>
 80013ba:	2301      	movs	r3, #1
 80013bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	2300      	movs	r3, #0
 80013e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fab5 	bl	8000954 <HAL_GetTick>
 80013ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fab0 	bl	8000954 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d902      	bls.n	8001406 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	f000 bc50 	b.w	8001ca6 <HAL_RCC_OscConfig+0xe02>
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x592>
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e013      	b.n	800145e <HAL_RCC_OscConfig+0x5ba>
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800144e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x650>)
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2202      	movs	r2, #2
 8001460:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001464:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001468:	fa92 f2a2 	rbit	r2, r2
 800146c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001470:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f002 021f 	and.w	r2, r2, #31
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1af      	bne.n	80013f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80da 	beq.w	8001654 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d069      	beq.n	800157e <HAL_RCC_OscConfig+0x6da>
 80014aa:	2301      	movs	r3, #1
 80014ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x654>)
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	461a      	mov	r2, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff fa3e 	bl	8000954 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	e00e      	b.n	80014fc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014de:	f7ff fa39 	bl	8000954 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d906      	bls.n	80014fc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e3d9      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	10908120 	.word	0x10908120
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800150e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800153c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	4ba5      	ldr	r3, [pc, #660]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001546:	2102      	movs	r1, #2
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fa93 f1a3 	rbit	r1, r3
 8001554:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001558:	6019      	str	r1, [r3, #0]
  return result;
 800155a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0b0      	beq.n	80014de <HAL_RCC_OscConfig+0x63a>
 800157c:	e06a      	b.n	8001654 <HAL_RCC_OscConfig+0x7b0>
 800157e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001594:	601a      	str	r2, [r3, #0]
  return result;
 8001596:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800159a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <HAL_RCC_OscConfig+0x934>)
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	461a      	mov	r2, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff f9d0 	bl	8000954 <HAL_GetTick>
 80015b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	e009      	b.n	80015ce <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff f9cb 	bl	8000954 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e36b      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 80015ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001614:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800161e:	2102      	movs	r1, #2
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fa93 f1a3 	rbit	r1, r3
 800162c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001630:	6019      	str	r1, [r3, #0]
  return result;
 8001632:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1b2      	bne.n	80015ba <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8158 	beq.w	8001914 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d112      	bne.n	800169c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a56      	ldr	r2, [pc, #344]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <HAL_RCC_OscConfig+0x938>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11a      	bne.n	80016de <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x938>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_RCC_OscConfig+0x938>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b4:	f7ff f94e 	bl	8000954 <HAL_GetTick>
 80016b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff f949 	bl	8000954 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e2e9      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_RCC_OscConfig+0x938>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0ef      	beq.n	80016be <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x852>
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a39      	ldr	r2, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e02f      	b.n	8001756 <HAL_RCC_OscConfig+0x8b2>
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x876>
 8001700:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	e01d      	b.n	8001756 <HAL_RCC_OscConfig+0x8b2>
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x89a>
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x8b2>
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d06b      	beq.n	8001838 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f8f8 	bl	8000954 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f8f3 	bl	8000954 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e291      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 8001782:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017b0:	601a      	str	r2, [r3, #0]
  return result;
 80017b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d109      	bne.n	80017e0 <HAL_RCC_OscConfig+0x93c>
 80017cc:	4b01      	ldr	r3, [pc, #4]	; (80017d4 <HAL_RCC_OscConfig+0x930>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	e014      	b.n	80017fc <HAL_RCC_OscConfig+0x958>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	10908120 	.word	0x10908120
 80017dc:	40007000 	.word	0x40007000
 80017e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4bbb      	ldr	r3, [pc, #748]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001800:	2102      	movs	r1, #2
 8001802:	6011      	str	r1, [r2, #0]
 8001804:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	fa92 f1a2 	rbit	r1, r2
 800180e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001812:	6011      	str	r1, [r2, #0]
  return result;
 8001814:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	fab2 f282 	clz	r2, r2
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f002 021f 	and.w	r2, r2, #31
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d099      	beq.n	800176a <HAL_RCC_OscConfig+0x8c6>
 8001836:	e063      	b.n	8001900 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff f88c 	bl	8000954 <HAL_GetTick>
 800183c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	e00b      	b.n	800185a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff f887 	bl	8000954 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e225      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 800185a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800188e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_OscConfig+0xa06>
 80018a4:	4b90      	ldr	r3, [pc, #576]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	e00d      	b.n	80018c6 <HAL_RCC_OscConfig+0xa22>
 80018aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	4b89      	ldr	r3, [pc, #548]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018ca:	2102      	movs	r1, #2
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fa92 f1a2 	rbit	r1, r2
 80018d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018dc:	6011      	str	r1, [r2, #0]
  return result;
 80018de:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1a0      	bne.n	8001842 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001900:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b77      	ldr	r3, [pc, #476]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a76      	ldr	r2, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 81c2 	beq.w	8001ca4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b71      	ldr	r3, [pc, #452]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	f000 819c 	beq.w	8001c66 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b02      	cmp	r3, #2
 8001936:	f040 8114 	bne.w	8001b62 <HAL_RCC_OscConfig+0xcbe>
 800193a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800193e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001952:	601a      	str	r2, [r3, #0]
  return result;
 8001954:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001958:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001964:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe fff0 	bl	8000954 <HAL_GetTick>
 8001974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001978:	e009      	b.n	800198e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197a:	f7fe ffeb 	bl	8000954 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e18b      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 800198e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019a6:	601a      	str	r2, [r3, #0]
  return result;
 80019a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0xb24>
 80019c2:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e01b      	b.n	8001a00 <HAL_RCC_OscConfig+0xb5c>
 80019c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a08:	6011      	str	r1, [r2, #0]
 8001a0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fa92 f1a2 	rbit	r1, r2
 8001a14:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a18:	6011      	str	r1, [r2, #0]
  return result;
 8001a1a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d19e      	bne.n	800197a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	4925      	ldr	r1, [pc, #148]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
 8001a58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a76:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ff61 	bl	8000954 <HAL_GetTick>
 8001a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a96:	e009      	b.n	8001aac <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7fe ff5c 	bl	8000954 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0fc      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 8001aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac4:	601a      	str	r2, [r3, #0]
  return result;
 8001ac6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0xc48>
 8001ae0:	4b01      	ldr	r3, [pc, #4]	; (8001ae8 <HAL_RCC_OscConfig+0xc44>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e01e      	b.n	8001b24 <HAL_RCC_OscConfig+0xc80>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f2a3 	rbit	r2, r3
 8001b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0xe0c>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b2c:	6011      	str	r1, [r2, #0]
 8001b2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	fa92 f1a2 	rbit	r1, r2
 8001b38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b3c:	6011      	str	r1, [r2, #0]
  return result;
 8001b3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	fab2 f282 	clz	r2, r2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f042 0220 	orr.w	r2, r2, #32
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d09b      	beq.n	8001a98 <HAL_RCC_OscConfig+0xbf4>
 8001b60:	e0a0      	b.n	8001ca4 <HAL_RCC_OscConfig+0xe00>
 8001b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7a:	601a      	str	r2, [r3, #0]
  return result;
 8001b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	461a      	mov	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7fe fedc 	bl	8000954 <HAL_GetTick>
 8001b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7fe fed7 	bl	8000954 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e077      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	601a      	str	r2, [r3, #0]
  return result;
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xd4c>
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0xe0c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e01b      	b.n	8001c28 <HAL_RCC_OscConfig+0xd84>
 8001bf0:	f107 0320 	add.w	r3, r7, #32
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_RCC_OscConfig+0xe0c>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f107 0210 	add.w	r2, r7, #16
 8001c2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c30:	6011      	str	r1, [r2, #0]
 8001c32:	f107 0210 	add.w	r2, r7, #16
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fa92 f1a2 	rbit	r1, r2
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	6011      	str	r1, [r2, #0]
  return result;
 8001c42:	f107 020c 	add.w	r2, r7, #12
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d19e      	bne.n	8001ba2 <HAL_RCC_OscConfig+0xcfe>
 8001c64:	e01e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e018      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_RCC_OscConfig+0xe0c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09e      	sub	sp, #120	; 0x78
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e162      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b90      	ldr	r3, [pc, #576]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b8d      	ldr	r3, [pc, #564]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	498b      	ldr	r1, [pc, #556]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e14a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	497f      	ldr	r1, [pc, #508]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80dc 	beq.w	8001ee0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d13c      	bne.n	8001daa <HAL_RCC_ClockConfig+0xf6>
 8001d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xa6>
 8001d54:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e00f      	b.n	8001d7a <HAL_RCC_ClockConfig+0xc6>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	667b      	str	r3, [r7, #100]	; 0x64
 8001d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8001d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d82:	fa92 f2a2 	rbit	r2, r2
 8001d86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d8a:	fab2 f282 	clz	r2, r2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d17b      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0f3      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d13c      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x178>
 8001db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x128>
 8001dd6:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e00f      	b.n	8001dfc <HAL_RCC_ClockConfig+0x148>
 8001ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
 8001dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dee:	643b      	str	r3, [r7, #64]	; 0x40
 8001df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df8:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e00:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e04:	fa92 f2a2 	rbit	r2, r2
 8001e08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f002 021f 	and.w	r2, r2, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d13a      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b2      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x1a0>
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e00d      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1bc>
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e60:	2302      	movs	r3, #2
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	2202      	movs	r2, #2
 8001e72:	61ba      	str	r2, [r7, #24]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	617a      	str	r2, [r7, #20]
  return result;
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	fab2 f282 	clz	r2, r2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f042 0220 	orr.w	r2, r2, #32
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f002 021f 	and.w	r2, r2, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e079      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	491a      	ldr	r1, [pc, #104]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fd50 	bl	8000954 <HAL_GetTick>
 8001eb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe fd4c 	bl	8000954 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e061      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d214      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4906      	ldr	r1, [pc, #24]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e040      	b.n	8001f92 <HAL_RCC_ClockConfig+0x2de>
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_ClockConfig+0x2e8>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	491a      	ldr	r1, [pc, #104]	; (8001f9c <HAL_RCC_ClockConfig+0x2e8>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x2e8>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4912      	ldr	r1, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x2e8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f56:	f000 f85d 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_RCC_ClockConfig+0x2e8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f64:	22f0      	movs	r2, #240	; 0xf0
 8001f66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	fa92 f2a2 	rbit	r2, r2
 8001f6e:	60fa      	str	r2, [r7, #12]
  return result;
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	fab2 f282 	clz	r2, r2
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	40d3      	lsrs	r3, r2
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x2ec>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f82:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <HAL_RCC_ClockConfig+0x2f0>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_RCC_ClockConfig+0x2f4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fc9e 	bl	80008cc <HAL_InitTick>
  
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3778      	adds	r7, #120	; 0x78
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08003f08 	.word	0x08003f08
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8001fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc8:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_MCOConfig+0x64>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_RCC_MCOConfig+0x64>)
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCC_MCOConfig+0x64>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f7fe fdce 	bl	8000b90 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_MCOConfig+0x64>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	430b      	orrs	r3, r1
 8002002:	4903      	ldr	r1, [pc, #12]	; (8002010 <HAL_RCC_MCOConfig+0x64>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d002      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x30>
 800203e:	2b08      	cmp	r3, #8
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x36>
 8002042:	e03c      	b.n	80020be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002046:	623b      	str	r3, [r7, #32]
      break;
 8002048:	e03c      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002050:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002054:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	607a      	str	r2, [r7, #4]
  return result;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	40d3      	lsrs	r3, r2
 8002068:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	220f      	movs	r2, #15
 8002078:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	60fa      	str	r2, [r7, #12]
  return result;
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	40d3      	lsrs	r3, r2
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
 80020ac:	e004      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c0:	623b      	str	r3, [r7, #32]
      break;
 80020c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	372c      	adds	r7, #44	; 0x2c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	007a1200 	.word	0x007a1200
 80020dc:	08003f18 	.word	0x08003f18
 80020e0:	08003f28 	.word	0x08003f28
 80020e4:	003d0900 	.word	0x003d0900

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b092      	sub	sp, #72	; 0x48
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80d4 	beq.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210c:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a4a      	ldr	r2, [pc, #296]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a41      	ldr	r2, [pc, #260]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7fe fc01 	bl	8000954 <HAL_GetTick>
 8002152:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe fbfd 	bl	8000954 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e13c      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8084 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002190:	429a      	cmp	r2, r3
 8002192:	d07c      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	461a      	mov	r2, r3
 80021be:	2301      	movs	r3, #1
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	2300      	movs	r3, #0
 80021e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04b      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fbad 	bl	8000954 <HAL_GetTick>
 80021fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fba9 	bl	8000954 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0e6      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002214:	2302      	movs	r3, #2
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	61fb      	str	r3, [r7, #28]
  return result;
 800222c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d108      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002242:	4b01      	ldr	r3, [pc, #4]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	e00d      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002248:	40021000 	.word	0x40021000
 800224c:	40007000 	.word	0x40007000
 8002250:	10908100 	.word	0x10908100
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	4b62      	ldr	r3, [pc, #392]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2202      	movs	r2, #2
 8002266:	613a      	str	r2, [r7, #16]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	60fa      	str	r2, [r7, #12]
  return result;
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	fab2 f282 	clz	r2, r2
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f002 021f 	and.w	r2, r2, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0b7      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800228e:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4954      	ldr	r1, [pc, #336]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800229c:	4313      	orrs	r3, r2
 800229e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c0:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f023 0203 	bic.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4947      	ldr	r1, [pc, #284]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f023 0210 	bic.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4940      	ldr	r1, [pc, #256]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f023 0220 	bic.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	4938      	ldr	r1, [pc, #224]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800230a:	4313      	orrs	r3, r2
 800230c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4931      	ldr	r1, [pc, #196]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002328:	4313      	orrs	r3, r2
 800232a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4929      	ldr	r1, [pc, #164]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002356:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4922      	ldr	r1, [pc, #136]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002364:	4313      	orrs	r3, r2
 8002366:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	491a      	ldr	r1, [pc, #104]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002382:	4313      	orrs	r3, r2
 8002384:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	4913      	ldr	r1, [pc, #76]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	490b      	ldr	r1, [pc, #44]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3748      	adds	r7, #72	; 0x48
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e049      	b.n	8002496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe f952 	bl	80006c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f000 ff56 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d001      	beq.n	80024b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e033      	b.n	8002520 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_TIM_Base_Start+0x8c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_Base_Start+0x3e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d004      	beq.n	80024de <HAL_TIM_Base_Start+0x3e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <HAL_TIM_Base_Start+0x90>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d115      	bne.n	800250a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_TIM_Base_Start+0x94>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d015      	beq.n	800251c <HAL_TIM_Base_Start+0x7c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d011      	beq.n	800251c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	e008      	b.n	800251c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e000      	b.n	800251e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40014000 	.word	0x40014000
 8002534:	00010007 	.word	0x00010007

08002538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e049      	b.n	80025de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe f88e 	bl	8000680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 feb2 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_TIM_PWM_Start+0x24>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e03c      	b.n	8002686 <HAL_TIM_PWM_Start+0x9e>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d109      	bne.n	8002626 <HAL_TIM_PWM_Start+0x3e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e02f      	b.n	8002686 <HAL_TIM_PWM_Start+0x9e>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x58>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e022      	b.n	8002686 <HAL_TIM_PWM_Start+0x9e>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d109      	bne.n	800265a <HAL_TIM_PWM_Start+0x72>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e015      	b.n	8002686 <HAL_TIM_PWM_Start+0x9e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b10      	cmp	r3, #16
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x8c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e008      	b.n	8002686 <HAL_TIM_PWM_Start+0x9e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e083      	b.n	8002796 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_TIM_PWM_Start+0xb6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	e023      	b.n	80026e6 <HAL_TIM_PWM_Start+0xfe>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0xc6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ac:	e01b      	b.n	80026e6 <HAL_TIM_PWM_Start+0xfe>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0xd6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026bc:	e013      	b.n	80026e6 <HAL_TIM_PWM_Start+0xfe>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_PWM_Start+0xe6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026cc:	e00b      	b.n	80026e6 <HAL_TIM_PWM_Start+0xfe>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PWM_Start+0xf6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	e003      	b.n	80026e6 <HAL_TIM_PWM_Start+0xfe>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fab0 	bl	8003c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <HAL_TIM_PWM_Start+0x1b8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_TIM_PWM_Start+0x134>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <HAL_TIM_PWM_Start+0x1bc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_TIM_PWM_Start+0x134>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <HAL_TIM_PWM_Start+0x1c0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_TIM_PWM_Start+0x134>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_TIM_PWM_Start+0x1c4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_TIM_PWM_Start+0x138>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_TIM_PWM_Start+0x13a>
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_TIM_PWM_Start+0x1b8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_TIM_PWM_Start+0x16c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002748:	d004      	beq.n	8002754 <HAL_TIM_PWM_Start+0x16c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <HAL_TIM_PWM_Start+0x1bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d115      	bne.n	8002780 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_TIM_PWM_Start+0x1c8>)
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b06      	cmp	r3, #6
 8002764:	d015      	beq.n	8002792 <HAL_TIM_PWM_Start+0x1aa>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d011      	beq.n	8002792 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	e008      	b.n	8002792 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e000      	b.n	8002794 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40014800 	.word	0x40014800
 80027b0:	00010007 	.word	0x00010007

080027b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e049      	b.n	800285a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f841 	bl	8002862 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f000 fd74 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <HAL_TIM_IC_Start_IT+0x1e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e023      	b.n	80028de <HAL_TIM_IC_Start_IT+0x66>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_IC_Start_IT+0x2e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e01b      	b.n	80028de <HAL_TIM_IC_Start_IT+0x66>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_IC_Start_IT+0x3e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	e013      	b.n	80028de <HAL_TIM_IC_Start_IT+0x66>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_IC_Start_IT+0x4e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e00b      	b.n	80028de <HAL_TIM_IC_Start_IT+0x66>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_IC_Start_IT+0x5e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e003      	b.n	80028de <HAL_TIM_IC_Start_IT+0x66>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_TIM_IC_Start_IT+0x78>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e013      	b.n	8002918 <HAL_TIM_IC_Start_IT+0xa0>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d104      	bne.n	8002900 <HAL_TIM_IC_Start_IT+0x88>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e00b      	b.n	8002918 <HAL_TIM_IC_Start_IT+0xa0>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d104      	bne.n	8002910 <HAL_TIM_IC_Start_IT+0x98>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e003      	b.n	8002918 <HAL_TIM_IC_Start_IT+0xa0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002916:	b2db      	uxtb	r3, r3
 8002918:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002920:	7b7b      	ldrb	r3, [r7, #13]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0c9      	b.n	8002abe <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_TIM_IC_Start_IT+0xc2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002938:	e023      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x10a>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d104      	bne.n	800294a <HAL_TIM_IC_Start_IT+0xd2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	e01b      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x10a>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d104      	bne.n	800295a <HAL_TIM_IC_Start_IT+0xe2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002958:	e013      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x10a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d104      	bne.n	800296a <HAL_TIM_IC_Start_IT+0xf2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002968:	e00b      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x10a>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b10      	cmp	r3, #16
 800296e:	d104      	bne.n	800297a <HAL_TIM_IC_Start_IT+0x102>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	e003      	b.n	8002982 <HAL_TIM_IC_Start_IT+0x10a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <HAL_TIM_IC_Start_IT+0x11a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002990:	e013      	b.n	80029ba <HAL_TIM_IC_Start_IT+0x142>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_IC_Start_IT+0x12a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a0:	e00b      	b.n	80029ba <HAL_TIM_IC_Start_IT+0x142>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_IC_Start_IT+0x13a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029b0:	e003      	b.n	80029ba <HAL_TIM_IC_Start_IT+0x142>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d841      	bhi.n	8002a44 <HAL_TIM_IC_Start_IT+0x1cc>
 80029c0:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_TIM_IC_Start_IT+0x150>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029fd 	.word	0x080029fd
 80029cc:	08002a45 	.word	0x08002a45
 80029d0:	08002a45 	.word	0x08002a45
 80029d4:	08002a45 	.word	0x08002a45
 80029d8:	08002a0f 	.word	0x08002a0f
 80029dc:	08002a45 	.word	0x08002a45
 80029e0:	08002a45 	.word	0x08002a45
 80029e4:	08002a45 	.word	0x08002a45
 80029e8:	08002a21 	.word	0x08002a21
 80029ec:	08002a45 	.word	0x08002a45
 80029f0:	08002a45 	.word	0x08002a45
 80029f4:	08002a45 	.word	0x08002a45
 80029f8:	08002a33 	.word	0x08002a33
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0202 	orr.w	r2, r2, #2
 8002a0a:	60da      	str	r2, [r3, #12]
      break;
 8002a0c:	e01d      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0204 	orr.w	r2, r2, #4
 8002a1c:	60da      	str	r2, [r3, #12]
      break;
 8002a1e:	e014      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	60da      	str	r2, [r3, #12]
      break;
 8002a30:	e00b      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0210 	orr.w	r2, r2, #16
 8002a40:	60da      	str	r2, [r3, #12]
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d135      	bne.n	8002abc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f8fb 	bl	8003c54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_TIM_IC_Start_IT+0x250>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIM_IC_Start_IT+0x204>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_IC_Start_IT+0x204>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a15      	ldr	r2, [pc, #84]	; (8002acc <HAL_TIM_IC_Start_IT+0x254>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d115      	bne.n	8002aa8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_TIM_IC_Start_IT+0x258>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d015      	beq.n	8002aba <HAL_TIM_IC_Start_IT+0x242>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d011      	beq.n	8002aba <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	e008      	b.n	8002aba <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e000      	b.n	8002abc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	00010007 	.word	0x00010007

08002ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d122      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11b      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0202 	mvn.w	r2, #2
 8002b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd fd28 	bl	800056c <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fbc0 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fbc7 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d122      	bne.n	8002b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d11b      	bne.n	8002b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0204 	mvn.w	r2, #4
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fd fcfe 	bl	800056c <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fb96 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fb9d 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0208 	mvn.w	r2, #8
 8002ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2204      	movs	r2, #4
 8002bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd fcd4 	bl	800056c <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fb6c 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fb73 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0210 	mvn.w	r2, #16
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2208      	movs	r2, #8
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fd fcaa 	bl	800056c <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fb42 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fb49 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0201 	mvn.w	r2, #1
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fb1c 	bl	8003290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b80      	cmp	r3, #128	; 0x80
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d107      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 f8f6 	bl	8003e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c92:	d10e      	bne.n	8002cb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d107      	bne.n	8002cb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 f8e9 	bl	8003e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d10e      	bne.n	8002cde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d107      	bne.n	8002cde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 faf7 	bl	80032cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d10e      	bne.n	8002d0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d107      	bne.n	8002d0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0220 	mvn.w	r2, #32
 8002d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f001 f8a9 	bl	8003e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e088      	b.n	8002e42 <HAL_TIM_IC_ConfigChannel+0x130>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11b      	bne.n	8002d76 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f000 fddb 	bl	8003908 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 020c 	bic.w	r2, r2, #12
 8002d60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6999      	ldr	r1, [r3, #24]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	619a      	str	r2, [r3, #24]
 8002d74:	e060      	b.n	8002e38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d11c      	bne.n	8002db6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f000 fe41 	bl	8003a12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6999      	ldr	r1, [r3, #24]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	021a      	lsls	r2, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
 8002db4:	e040      	b.n	8002e38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f000 fe8e 	bl	8003aec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020c 	bic.w	r2, r2, #12
 8002dde:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69d9      	ldr	r1, [r3, #28]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	61da      	str	r2, [r3, #28]
 8002df2:	e021      	b.n	8002e38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d11c      	bne.n	8002e34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f000 feab 	bl	8003b64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69d9      	ldr	r1, [r3, #28]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	021a      	lsls	r2, r3, #8
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	61da      	str	r2, [r3, #28]
 8002e32:	e001      	b.n	8002e38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0ff      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b14      	cmp	r3, #20
 8002e76:	f200 80f0 	bhi.w	800305a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002ed5 	.word	0x08002ed5
 8002e84:	0800305b 	.word	0x0800305b
 8002e88:	0800305b 	.word	0x0800305b
 8002e8c:	0800305b 	.word	0x0800305b
 8002e90:	08002f15 	.word	0x08002f15
 8002e94:	0800305b 	.word	0x0800305b
 8002e98:	0800305b 	.word	0x0800305b
 8002e9c:	0800305b 	.word	0x0800305b
 8002ea0:	08002f57 	.word	0x08002f57
 8002ea4:	0800305b 	.word	0x0800305b
 8002ea8:	0800305b 	.word	0x0800305b
 8002eac:	0800305b 	.word	0x0800305b
 8002eb0:	08002f97 	.word	0x08002f97
 8002eb4:	0800305b 	.word	0x0800305b
 8002eb8:	0800305b 	.word	0x0800305b
 8002ebc:	0800305b 	.word	0x0800305b
 8002ec0:	08002fd9 	.word	0x08002fd9
 8002ec4:	0800305b 	.word	0x0800305b
 8002ec8:	0800305b 	.word	0x0800305b
 8002ecc:	0800305b 	.word	0x0800305b
 8002ed0:	08003019 	.word	0x08003019
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fa6e 	bl	80033bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6999      	ldr	r1, [r3, #24]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	619a      	str	r2, [r3, #24]
      break;
 8002f12:	e0a5      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fad4 	bl	80034c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]
      break;
 8002f54:	e084      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fb33 	bl	80035c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0208 	orr.w	r2, r2, #8
 8002f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0204 	bic.w	r2, r2, #4
 8002f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69d9      	ldr	r1, [r3, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
      break;
 8002f94:	e064      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fb91 	bl	80036c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
      break;
 8002fd6:	e043      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fbd4 	bl	800378c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003016:	e023      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fc12 	bl	8003848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003058:	e002      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
      break;
 800305e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003068:	7dfb      	ldrb	r3, [r7, #23]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop

08003074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x1c>
 800308c:	2302      	movs	r3, #2
 800308e:	e0b6      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x18a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d03e      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xd8>
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	f200 8087 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	f000 8086 	beq.w	80031ea <HAL_TIM_ConfigClockSource+0x176>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d87f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d01a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xaa>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d87b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d050      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x11e>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d877      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d03c      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xfe>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d873      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d058      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x13e>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d86f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d064      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d86b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d060      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d867      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d05a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15e>
 800311c:	e062      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 fd71 	bl	8003c14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e04f      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 fd5a 	bl	8003c14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316e:	609a      	str	r2, [r3, #8]
      break;
 8003170:	e03c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fc18 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fd27 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003190:	e02c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fc74 	bl	8003a8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2160      	movs	r1, #96	; 0x60
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fd17 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 80031b0:	e01c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fbf8 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fd07 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 80031d0:	e00c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fcfe 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 80031e2:	e003      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e000      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d831      	bhi.n	8003280 <HAL_TIM_ReadCapturedValue+0x78>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_TIM_ReadCapturedValue+0x1c>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003259 	.word	0x08003259
 8003228:	08003281 	.word	0x08003281
 800322c:	08003281 	.word	0x08003281
 8003230:	08003281 	.word	0x08003281
 8003234:	08003263 	.word	0x08003263
 8003238:	08003281 	.word	0x08003281
 800323c:	08003281 	.word	0x08003281
 8003240:	08003281 	.word	0x08003281
 8003244:	0800326d 	.word	0x0800326d
 8003248:	08003281 	.word	0x08003281
 800324c:	08003281 	.word	0x08003281
 8003250:	08003281 	.word	0x08003281
 8003254:	08003277 	.word	0x08003277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	60fb      	str	r3, [r7, #12]

      break;
 8003260:	e00f      	b.n	8003282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	60fb      	str	r3, [r7, #12]

      break;
 800326a:	e00a      	b.n	8003282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	60fb      	str	r3, [r7, #12]

      break;
 8003274:	e005      	b.n	8003282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	60fb      	str	r3, [r7, #12]

      break;
 800327e:	e000      	b.n	8003282 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003280:	bf00      	nop
  }

  return tmpreg;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <TIM_Base_SetConfig+0xcc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x20>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <TIM_Base_SetConfig+0xcc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00f      	beq.n	800333a <TIM_Base_SetConfig+0x5a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d00b      	beq.n	800333a <TIM_Base_SetConfig+0x5a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <TIM_Base_SetConfig+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <TIM_Base_SetConfig+0x5a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <TIM_Base_SetConfig+0xd4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0x5a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <TIM_Base_SetConfig+0xd8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <TIM_Base_SetConfig+0xcc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00b      	beq.n	8003390 <TIM_Base_SetConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <TIM_Base_SetConfig+0xd0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <TIM_Base_SetConfig+0xb0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0xd4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0xb0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <TIM_Base_SetConfig+0xd8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <TIM_OC1_SetConfig+0xfc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_OC1_SetConfig+0x78>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <TIM_OC1_SetConfig+0x100>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_OC1_SetConfig+0x78>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <TIM_OC1_SetConfig+0x104>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC1_SetConfig+0x78>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <TIM_OC1_SetConfig+0x108>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0308 	bic.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <TIM_OC1_SetConfig+0xfc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_OC1_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a18      	ldr	r2, [pc, #96]	; (80034bc <TIM_OC1_SetConfig+0x100>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_OC1_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <TIM_OC1_SetConfig+0x104>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_OC1_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <TIM_OC1_SetConfig+0x108>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d111      	bne.n	8003492 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800347c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800

080034c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f023 0210 	bic.w	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0320 	bic.w	r3, r3, #32
 8003516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <TIM_OC2_SetConfig+0xf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10d      	bne.n	8003548 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <TIM_OC2_SetConfig+0xf0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00b      	beq.n	8003568 <TIM_OC2_SetConfig+0xa0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <TIM_OC2_SetConfig+0xf4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <TIM_OC2_SetConfig+0xa0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <TIM_OC2_SetConfig+0xf8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC2_SetConfig+0xa0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <TIM_OC2_SetConfig+0xfc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d113      	bne.n	8003590 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003576:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800

080035c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <TIM_OC3_SetConfig+0xec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10d      	bne.n	8003646 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003644:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <TIM_OC3_SetConfig+0xec>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_OC3_SetConfig+0x9e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <TIM_OC3_SetConfig+0xf0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_OC3_SetConfig+0x9e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <TIM_OC3_SetConfig+0xf4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_OC3_SetConfig+0x9e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <TIM_OC3_SetConfig+0xf8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d113      	bne.n	800368e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800366c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	031b      	lsls	r3, r3, #12
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <TIM_OC4_SetConfig+0xb8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_OC4_SetConfig+0x7c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <TIM_OC4_SetConfig+0xbc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC4_SetConfig+0x7c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a14      	ldr	r2, [pc, #80]	; (8003784 <TIM_OC4_SetConfig+0xc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC4_SetConfig+0x7c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a13      	ldr	r2, [pc, #76]	; (8003788 <TIM_OC4_SetConfig+0xc4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d109      	bne.n	8003754 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <TIM_OC5_SetConfig+0xac>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00b      	beq.n	80037fe <TIM_OC5_SetConfig+0x72>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <TIM_OC5_SetConfig+0xb0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_OC5_SetConfig+0x72>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <TIM_OC5_SetConfig+0xb4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_OC5_SetConfig+0x72>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a12      	ldr	r2, [pc, #72]	; (8003844 <TIM_OC5_SetConfig+0xb8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d109      	bne.n	8003812 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800

08003848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800388e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	051b      	lsls	r3, r3, #20
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC6_SetConfig+0xb0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00b      	beq.n	80038bc <TIM_OC6_SetConfig+0x74>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC6_SetConfig+0xb4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <TIM_OC6_SetConfig+0x74>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <TIM_OC6_SetConfig+0xb8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_OC6_SetConfig+0x74>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <TIM_OC6_SetConfig+0xbc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d109      	bne.n	80038d0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800

08003908 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <TIM_TI1_SetConfig+0xa4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <TIM_TI1_SetConfig+0x3e>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d003      	beq.n	8003946 <TIM_TI1_SetConfig+0x3e>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <TIM_TI1_SetConfig+0xa8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <TIM_TI1_SetConfig+0x42>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <TIM_TI1_SetConfig+0x44>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e003      	b.n	800396a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	b2db      	uxtb	r3, r3
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f023 030a 	bic.w	r3, r3, #10
 8003984:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f003 030a 	and.w	r3, r3, #10
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40014000 	.word	0x40014000

080039b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0201 	bic.w	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 030a 	bic.w	r3, r3, #10
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 0210 	bic.w	r2, r3, #16
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	031b      	lsls	r3, r3, #12
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0210 	bic.w	r2, r3, #16
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	031b      	lsls	r3, r3, #12
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f023 0303 	bic.w	r3, r3, #3
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	031b      	lsls	r3, r3, #12
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	031b      	lsls	r3, r3, #12
 8003bbc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f043 0307 	orr.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	2201      	movs	r2, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	401a      	ands	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1a      	ldr	r2, [r3, #32]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e04f      	b.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d108      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ce8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d004      	beq.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10c      	bne.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40014000 	.word	0x40014000

08003d6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e060      	b.n	8003e4a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d115      	bne.n	8003e38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	051b      	lsls	r3, r3, #20
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00

08003e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <__libc_init_array>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ed0 <__libc_init_array+0x38>)
 8003e9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <__libc_init_array+0x3c>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	42a6      	cmp	r6, r4
 8003ea6:	d109      	bne.n	8003ebc <__libc_init_array+0x24>
 8003ea8:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <__libc_init_array+0x40>)
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <__libc_init_array+0x44>)
 8003eac:	f000 f820 	bl	8003ef0 <_init>
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	42a6      	cmp	r6, r4
 8003eb8:	d105      	bne.n	8003ec6 <__libc_init_array+0x2e>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec0:	4798      	blx	r3
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__libc_init_array+0xc>
 8003ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eca:	4798      	blx	r3
 8003ecc:	3601      	adds	r6, #1
 8003ece:	e7f2      	b.n	8003eb6 <__libc_init_array+0x1e>
 8003ed0:	08003f38 	.word	0x08003f38
 8003ed4:	08003f38 	.word	0x08003f38
 8003ed8:	08003f38 	.word	0x08003f38
 8003edc:	08003f3c 	.word	0x08003f3c

08003ee0 <memset>:
 8003ee0:	4402      	add	r2, r0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <_init>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr

08003efc <_fini>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr
