
protoTD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08004020  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08004020  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180a  00000000  00000000  0002a315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143bc  00000000  00000000  0002cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b257  00000000  00000000  00041174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f6fe  00000000  00000000  0004c3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000cbb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fc4 	.word	0x08003fc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003fc4 	.word	0x08003fc4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbae 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f976 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f904 	bl	80003e4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001dc:	f000 f874 	bl	80002c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //start PWM servo
  HAL_TIM_Base_Start(&htim1);
 80001e0:	4808      	ldr	r0, [pc, #32]	; (8000204 <main+0x3c>)
 80001e2:	f002 f9c7 	bl	8002574 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80001e6:	210c      	movs	r1, #12
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <main+0x3c>)
 80001ea:	f002 fa67 	bl	80026bc <HAL_TIM_PWM_Start>

  //start reading frequency
  HAL_TIM_Base_Start(&htim2);
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0x40>)
 80001f0:	f002 f9c0 	bl	8002574 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80001f4:	2100      	movs	r1, #0
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x40>)
 80001f8:	f002 fba8 	bl	800294c <HAL_TIM_IC_Start_IT>
  while(1){

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	touner_servo();
 80001fc:	f000 f9be 	bl	800057c <touner_servo>
 8000200:	e7fc      	b.n	80001fc <main+0x34>
 8000202:	bf00      	nop
 8000204:	2000003c 	.word	0x2000003c
 8000208:	20000088 	.word	0x20000088

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b09c      	sub	sp, #112	; 0x70
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 feca 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2230      	movs	r2, #48	; 0x30
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 febc 	bl	8003fb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023c:	2302      	movs	r3, #2
 800023e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000244:	2310      	movs	r3, #16
 8000246:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800024c:	2300      	movs	r3, #0
 800024e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000250:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000254:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fe8c 	bl	8000f78 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000266:	f000 fa27 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd7e 	bl	8001d88 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000292:	f000 fa11 	bl	80006b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800029a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 ff8a 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002ae:	f000 fa03 	bl	80006b8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80002b8:	2000      	movs	r0, #0
 80002ba:	f001 fee1 	bl	8002080 <HAL_RCC_MCOConfig>
}
 80002be:	bf00      	nop
 80002c0:	3770      	adds	r7, #112	; 0x70
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b096      	sub	sp, #88	; 0x58
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	222c      	movs	r2, #44	; 0x2c
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f003 fe5d 	bl	8003fb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002fa:	4b38      	ldr	r3, [pc, #224]	; (80003dc <MX_TIM1_Init+0x114>)
 80002fc:	4a38      	ldr	r2, [pc, #224]	; (80003e0 <MX_TIM1_Init+0x118>)
 80002fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000300:	4b36      	ldr	r3, [pc, #216]	; (80003dc <MX_TIM1_Init+0x114>)
 8000302:	2209      	movs	r2, #9
 8000304:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <MX_TIM1_Init+0x114>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 800030c:	4b33      	ldr	r3, [pc, #204]	; (80003dc <MX_TIM1_Init+0x114>)
 800030e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000312:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <MX_TIM1_Init+0x114>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800031a:	4b30      	ldr	r3, [pc, #192]	; (80003dc <MX_TIM1_Init+0x114>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <MX_TIM1_Init+0x114>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000326:	482d      	ldr	r0, [pc, #180]	; (80003dc <MX_TIM1_Init+0x114>)
 8000328:	f002 f970 	bl	800260c <HAL_TIM_PWM_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f9c1 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033e:	2300      	movs	r3, #0
 8000340:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000342:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000346:	4619      	mov	r1, r3
 8000348:	4824      	ldr	r0, [pc, #144]	; (80003dc <MX_TIM1_Init+0x114>)
 800034a:	f003 fd13 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000354:	f000 f9b0 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000358:	2360      	movs	r3, #96	; 0x60
 800035a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000360:	2300      	movs	r3, #0
 8000362:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000374:	220c      	movs	r2, #12
 8000376:	4619      	mov	r1, r3
 8000378:	4818      	ldr	r0, [pc, #96]	; (80003dc <MX_TIM1_Init+0x114>)
 800037a:	f002 fdd1 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000384:	f000 f998 	bl	80006b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800039c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4807      	ldr	r0, [pc, #28]	; (80003dc <MX_TIM1_Init+0x114>)
 80003be:	f003 fd3f 	bl	8003e40 <HAL_TIMEx_ConfigBreakDeadTime>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80003c8:	f000 f976 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003cc:	4803      	ldr	r0, [pc, #12]	; (80003dc <MX_TIM1_Init+0x114>)
 80003ce:	f000 fa05 	bl	80007dc <HAL_TIM_MspPostInit>

}
 80003d2:	bf00      	nop
 80003d4:	3758      	adds	r7, #88	; 0x58
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	2000003c 	.word	0x2000003c
 80003e0:	40012c00 	.word	0x40012c00

080003e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ea:	f107 0320 	add.w	r3, r7, #32
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000418:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <MX_TIM2_Init+0xdc>)
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800042a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <MX_TIM2_Init+0xdc>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000432:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000438:	4821      	ldr	r0, [pc, #132]	; (80004c0 <MX_TIM2_Init+0xdc>)
 800043a:	f002 f843 	bl	80024c4 <HAL_TIM_Base_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000444:	f000 f938 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044e:	f107 0320 	add.w	r3, r7, #32
 8000452:	4619      	mov	r1, r3
 8000454:	481a      	ldr	r0, [pc, #104]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000456:	f002 fe77 	bl	8003148 <HAL_TIM_ConfigClockSource>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000460:	f000 f92a 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000464:	4816      	ldr	r0, [pc, #88]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000466:	f002 fa0f 	bl	8002888 <HAL_TIM_IC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000470:	f000 f922 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	4619      	mov	r1, r3
 8000482:	480f      	ldr	r0, [pc, #60]	; (80004c0 <MX_TIM2_Init+0xdc>)
 8000484:	f003 fc76 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800048e:	f000 f913 	bl	80006b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000496:	2301      	movs	r3, #1
 8000498:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_TIM2_Init+0xdc>)
 80004aa:	f002 fc9c 	bl	8002de6 <HAL_TIM_IC_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004b4:	f000 f900 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	3730      	adds	r7, #48	; 0x30
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000088 	.word	0x20000088

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b26      	ldr	r3, [pc, #152]	; (8000574 <MX_GPIO_Init+0xb0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a25      	ldr	r2, [pc, #148]	; (8000574 <MX_GPIO_Init+0xb0>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b23      	ldr	r3, [pc, #140]	; (8000574 <MX_GPIO_Init+0xb0>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <MX_GPIO_Init+0xb0>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a1f      	ldr	r2, [pc, #124]	; (8000574 <MX_GPIO_Init+0xb0>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_GPIO_Init+0xb0>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_GPIO_Init+0xb0>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a19      	ldr	r2, [pc, #100]	; (8000574 <MX_GPIO_Init+0xb0>)
 8000510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_GPIO_Init+0xb0>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	4814      	ldr	r0, [pc, #80]	; (8000578 <MX_GPIO_Init+0xb4>)
 8000528:	f000 fd0e 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800052c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 fb8a 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000550:	2308      	movs	r3, #8
 8000552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4619      	mov	r1, r3
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_GPIO_Init+0xb4>)
 8000568:	f000 fb7c 	bl	8000c64 <HAL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	48000400 	.word	0x48000400

0800057c <touner_servo>:

/* USER CODE BEGIN 4 */
void touner_servo(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	if (frequency > 93000){
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <touner_servo+0x80>)
 8000582:	edd3 7a00 	vldr	s15, [r3]
 8000586:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000600 <touner_servo+0x84>
 800058a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000592:	dd0d      	ble.n	80005b0 <touner_servo+0x34>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2108      	movs	r1, #8
 8000598:	481a      	ldr	r0, [pc, #104]	; (8000604 <touner_servo+0x88>)
 800059a:	f000 fcd5 	bl	8000f48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3200);
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <touner_servo+0x8c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80005a6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f000 fa25 	bl	80009f8 <HAL_Delay>
	} else if (frequency > 90000 && frequency < 92800){
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 9600);
		HAL_Delay(3200);
	}
}
 80005ae:	e023      	b.n	80005f8 <touner_servo+0x7c>
	} else if (frequency > 90000 && frequency < 92800){
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <touner_servo+0x80>)
 80005b2:	edd3 7a00 	vldr	s15, [r3]
 80005b6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800060c <touner_servo+0x90>
 80005ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c2:	dc00      	bgt.n	80005c6 <touner_servo+0x4a>
}
 80005c4:	e018      	b.n	80005f8 <touner_servo+0x7c>
	} else if (frequency > 90000 && frequency < 92800){
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <touner_servo+0x80>)
 80005c8:	edd3 7a00 	vldr	s15, [r3]
 80005cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000610 <touner_servo+0x94>
 80005d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d8:	d400      	bmi.n	80005dc <touner_servo+0x60>
}
 80005da:	e00d      	b.n	80005f8 <touner_servo+0x7c>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2108      	movs	r1, #8
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <touner_servo+0x88>)
 80005e2:	f000 fcb1 	bl	8000f48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 9600);
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <touner_servo+0x8c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005ee:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(3200);
 80005f0:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 80005f4:	f000 fa00 	bl	80009f8 <HAL_Delay>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000038 	.word	0x20000038
 8000600:	47b5a400 	.word	0x47b5a400
 8000604:	48000400 	.word	0x48000400
 8000608:	2000003c 	.word	0x2000003c
 800060c:	47afc800 	.word	0x47afc800
 8000610:	47b54000 	.word	0x47b54000

08000614 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7f1b      	ldrb	r3, [r3, #28]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d138      	bne.n	8000696 <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10a      	bne.n	8000642 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800062c:	2100      	movs	r1, #0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f002 fe54 	bl	80032dc <HAL_TIM_ReadCapturedValue>
 8000634:	4603      	mov	r3, r0
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000638:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
			}
			Is_First_Captured = 0; // set it back to false
		}

	}
}
 8000640:	e029      	b.n	8000696 <HAL_TIM_IC_CaptureCallback+0x82>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000642:	2100      	movs	r1, #0
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f002 fe49 	bl	80032dc <HAL_TIM_ReadCapturedValue>
 800064a:	4603      	mov	r3, r0
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x94>)
 800064e:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	429a      	cmp	r2, r3
 800065a:	d919      	bls.n	8000690 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = IC_Val2-IC_Val1;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x94>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x98>)
 8000668:	6013      	str	r3, [r2, #0]
				float refClock = TIMCLOCK/(PRESCALAR);
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800066c:	60fb      	str	r3, [r7, #12]
				frequency = refClock/Difference;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x98>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800067a:	edd7 6a03 	vldr	s13, [r7, #12]
 800067e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000684:	edc3 7a00 	vstr	s15, [r3]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000034 	.word	0x20000034
 80006a4:	20000028 	.word	0x20000028
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	20000030 	.word	0x20000030
 80006b0:	4bf42400 	.word	0x4bf42400
 80006b4:	20000038 	.word	0x20000038

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x44>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x44>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x44>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x44>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_TIM_PWM_MspInit+0x38>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d10b      	bne.n	8000736 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <HAL_TIM_PWM_MspInit+0x3c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <HAL_TIM_PWM_MspInit+0x3c>)
 8000724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <HAL_TIM_PWM_MspInit+0x3c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40012c00 	.word	0x40012c00
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800076c:	d130      	bne.n	80007d0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <HAL_TIM_Base_MspInit+0x8c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <HAL_TIM_Base_MspInit+0x8c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_TIM_Base_MspInit+0x8c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_TIM_Base_MspInit+0x8c>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_TIM_Base_MspInit+0x8c>)
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_TIM_Base_MspInit+0x8c>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800079e:	2301      	movs	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007ae:	2301      	movs	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fa52 	bl	8000c64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	201c      	movs	r0, #28
 80007c6:	f000 fa16 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ca:	201c      	movs	r0, #28
 80007cc:	f000 fa2f 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <HAL_TIM_MspPostInit+0x68>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d11d      	bne.n	800083a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_TIM_MspPostInit+0x6c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <HAL_TIM_MspPostInit+0x6c>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_TIM_MspPostInit+0x6c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800081a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000828:	230b      	movs	r3, #11
 800082a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f000 fa15 	bl	8000c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40021000 	.word	0x40021000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f88e 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM2_IRQHandler+0x10>)
 80008a6:	f002 f97f 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000088 	.word	0x20000088

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000910 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000902:	f7ff ffd7 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f003 fb31 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090a:	f7ff fc5d 	bl	80001c8 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000910:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800091c:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8000920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000924:	200000d8 	.word	0x200000d8

08000928 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_IRQHandler>
	...

0800092c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f94f 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff febc 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f967 	bl	8000c4a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f92f 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	200000d4 	.word	0x200000d4

080009e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200000d4 	.word	0x200000d4

080009f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff3e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff31 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e14e      	b.n	8000f12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8140 	beq.w	8000f0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d005      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d130      	bne.n	8000d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	f003 0201 	and.w	r2, r3, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d017      	beq.n	8000d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d123      	bne.n	8000d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	6939      	ldr	r1, [r7, #16]
 8000d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0203 	and.w	r2, r3, #3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 809a 	beq.w	8000f0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd8:	4b55      	ldr	r3, [pc, #340]	; (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df0:	4a50      	ldr	r2, [pc, #320]	; (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x1e0>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a46      	ldr	r2, [pc, #280]	; (8000f38 <HAL_GPIO_Init+0x2d4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1dc>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a45      	ldr	r2, [pc, #276]	; (8000f3c <HAL_GPIO_Init+0x2d8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1d8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <HAL_GPIO_Init+0x2dc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1d4>
 8000e34:	2303      	movs	r3, #3
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e004      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e44:	2300      	movs	r3, #0
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e56:	4937      	ldr	r1, [pc, #220]	; (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e64:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e88:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb2:	4a24      	ldr	r2, [pc, #144]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f47f aea9 	bne.w	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f000 bef4 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 816a 	beq.w	8001276 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fa2:	4bb3      	ldr	r3, [pc, #716]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d00c      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fae:	4bb0      	ldr	r3, [pc, #704]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d159      	bne.n	800106e <HAL_RCC_OscConfig+0xf6>
 8000fba:	4bad      	ldr	r3, [pc, #692]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc6:	d152      	bne.n	800106e <HAL_RCC_OscConfig+0xf6>
 8000fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fcc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fdc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <HAL_RCC_OscConfig+0x82>
 8000ff4:	4b9e      	ldr	r3, [pc, #632]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	e015      	b.n	8001026 <HAL_RCC_OscConfig+0xae>
 8000ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800100e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001012:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001016:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001022:	4b93      	ldr	r3, [pc, #588]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800102e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001032:	fa92 f2a2 	rbit	r2, r2
 8001036:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800103a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800103e:	fab2 f282 	clz	r2, r2
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f042 0220 	orr.w	r2, r2, #32
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	f002 021f 	and.w	r2, r2, #31
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 810c 	beq.w	8001274 <HAL_RCC_OscConfig+0x2fc>
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 8106 	bne.w	8001274 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	f000 be86 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d106      	bne.n	8001088 <HAL_RCC_OscConfig+0x110>
 800107a:	4b7d      	ldr	r3, [pc, #500]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a7c      	ldr	r2, [pc, #496]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e030      	b.n	80010ea <HAL_RCC_OscConfig+0x172>
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x134>
 8001092:	4b77      	ldr	r3, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a76      	ldr	r2, [pc, #472]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b74      	ldr	r3, [pc, #464]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a73      	ldr	r2, [pc, #460]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01e      	b.n	80010ea <HAL_RCC_OscConfig+0x172>
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x15a>
 80010b8:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a6c      	ldr	r2, [pc, #432]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a69      	ldr	r2, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e00b      	b.n	80010ea <HAL_RCC_OscConfig+0x172>
 80010d2:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a66      	ldr	r2, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b64      	ldr	r3, [pc, #400]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a63      	ldr	r2, [pc, #396]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ea:	4b61      	ldr	r3, [pc, #388]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	f023 020f 	bic.w	r2, r3, #15
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	495d      	ldr	r1, [pc, #372]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d059      	beq.n	80011bc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fc6a 	bl	80009e0 <HAL_GetTick>
 800110c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001112:	f7ff fc65 	bl	80009e0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d902      	bls.n	8001128 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	f000 be29 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>
 8001128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800113c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d102      	bne.n	800115a <HAL_RCC_OscConfig+0x1e2>
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	e015      	b.n	8001186 <HAL_RCC_OscConfig+0x20e>
 800115a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800116e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001172:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001176:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800118a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800118e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001192:	fa92 f2a2 	rbit	r2, r2
 8001196:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800119a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	f042 0220 	orr.w	r2, r2, #32
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f002 021f 	and.w	r2, r2, #31
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0ab      	beq.n	8001112 <HAL_RCC_OscConfig+0x19a>
 80011ba:	e05c      	b.n	8001276 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc10 	bl	80009e0 <HAL_GetTick>
 80011c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c6:	f7ff fc0b 	bl	80009e0 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d902      	bls.n	80011dc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f000 bdcf 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <HAL_RCC_OscConfig+0x296>
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x2c2>
 800120e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001212:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001226:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800122a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_RCC_OscConfig+0x2f8>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001242:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001246:	fa92 f2a2 	rbit	r2, r2
 800124a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800124e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001252:	fab2 f282 	clz	r2, r2
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f002 021f 	and.w	r2, r2, #31
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ab      	bne.n	80011c6 <HAL_RCC_OscConfig+0x24e>
 800126e:	e002      	b.n	8001276 <HAL_RCC_OscConfig+0x2fe>
 8001270:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 816f 	beq.w	8001564 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001286:	4bd0      	ldr	r3, [pc, #832]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001292:	4bcd      	ldr	r3, [pc, #820]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d16c      	bne.n	8001378 <HAL_RCC_OscConfig+0x400>
 800129e:	4bca      	ldr	r3, [pc, #808]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d166      	bne.n	8001378 <HAL_RCC_OscConfig+0x400>
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x362>
 80012d4:	4bbc      	ldr	r3, [pc, #752]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	e013      	b.n	8001302 <HAL_RCC_OscConfig+0x38a>
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012fe:	4bb2      	ldr	r3, [pc, #712]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	2202      	movs	r2, #2
 8001304:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001308:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800130c:	fa92 f2a2 	rbit	r2, r2
 8001310:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001314:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001318:	fab2 f282 	clz	r2, r2
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	f042 0220 	orr.w	r2, r2, #32
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f002 021f 	and.w	r2, r2, #31
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_RCC_OscConfig+0x3cc>
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f000 bd1b 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4ba0      	ldr	r3, [pc, #640]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	21f8      	movs	r1, #248	; 0xf8
 8001354:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800135c:	fa91 f1a1 	rbit	r1, r1
 8001360:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001364:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001368:	fab1 f181 	clz	r1, r1
 800136c:	b2c9      	uxtb	r1, r1
 800136e:	408b      	lsls	r3, r1
 8001370:	4995      	ldr	r1, [pc, #596]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e0f5      	b.n	8001564 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8085 	beq.w	800148e <HAL_RCC_OscConfig+0x516>
 8001384:	2301      	movs	r3, #1
 8001386:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001396:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	461a      	mov	r2, r3
 80013ac:	2301      	movs	r3, #1
 80013ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb16 	bl	80009e0 <HAL_GetTick>
 80013b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fb11 	bl	80009e0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d902      	bls.n	80013d0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f000 bcd5 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d102      	bne.n	8001400 <HAL_RCC_OscConfig+0x488>
 80013fa:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	e013      	b.n	8001428 <HAL_RCC_OscConfig+0x4b0>
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001418:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	2202      	movs	r2, #2
 800142a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800142e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001432:	fa92 f2a2 	rbit	r2, r2
 8001436:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800143a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800143e:	fab2 f282 	clz	r2, r2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f002 021f 	and.w	r2, r2, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0af      	beq.n	80013ba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	21f8      	movs	r1, #248	; 0xf8
 800146a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001472:	fa91 f1a1 	rbit	r1, r1
 8001476:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800147a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800147e:	fab1 f181 	clz	r1, r1
 8001482:	b2c9      	uxtb	r1, r1
 8001484:	408b      	lsls	r3, r1
 8001486:	4950      	ldr	r1, [pc, #320]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	e06a      	b.n	8001564 <HAL_RCC_OscConfig+0x5ec>
 800148e:	2301      	movs	r3, #1
 8001490:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	461a      	mov	r2, r3
 80014b6:	2300      	movs	r3, #0
 80014b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fa91 	bl	80009e0 <HAL_GetTick>
 80014be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fa8c 	bl	80009e0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d902      	bls.n	80014da <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f000 bc50 	b.w	8001d7a <HAL_RCC_OscConfig+0xe02>
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x592>
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	e013      	b.n	8001532 <HAL_RCC_OscConfig+0x5ba>
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001522:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_OscConfig+0x650>)
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2202      	movs	r2, #2
 8001534:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001538:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800153c:	fa92 f2a2 	rbit	r2, r2
 8001540:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001544:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001548:	fab2 f282 	clz	r2, r2
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	f002 021f 	and.w	r2, r2, #31
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1af      	bne.n	80014c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80da 	beq.w	8001728 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d069      	beq.n	8001652 <HAL_RCC_OscConfig+0x6da>
 800157e:	2301      	movs	r3, #1
 8001580:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_OscConfig+0x654>)
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	461a      	mov	r2, r3
 80015a4:	2301      	movs	r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa1a 	bl	80009e0 <HAL_GetTick>
 80015ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b0:	e00e      	b.n	80015d0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fa15 	bl	80009e0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d906      	bls.n	80015d0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e3d9      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	10908120 	.word	0x10908120
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015e6:	2202      	movs	r2, #2
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001610:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	4ba5      	ldr	r3, [pc, #660]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001616:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800161a:	2102      	movs	r1, #2
 800161c:	6019      	str	r1, [r3, #0]
 800161e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fa93 f1a3 	rbit	r1, r3
 8001628:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800162c:	6019      	str	r1, [r3, #0]
  return result;
 800162e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0b0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x63a>
 8001650:	e06a      	b.n	8001728 <HAL_RCC_OscConfig+0x7b0>
 8001652:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001668:	601a      	str	r2, [r3, #0]
  return result;
 800166a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800166e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_RCC_OscConfig+0x934>)
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	461a      	mov	r2, r3
 8001680:	2300      	movs	r3, #0
 8001682:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f9ac 	bl	80009e0 <HAL_GetTick>
 8001688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff f9a7 	bl	80009e0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e36b      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 80016a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80016ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016f2:	2102      	movs	r1, #2
 80016f4:	6019      	str	r1, [r3, #0]
 80016f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f1a3 	rbit	r1, r3
 8001700:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001704:	6019      	str	r1, [r3, #0]
  return result;
 8001706:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1b2      	bne.n	800168e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8158 	beq.w	80019e8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d112      	bne.n	8001770 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <HAL_RCC_OscConfig+0x938>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177c:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <HAL_RCC_OscConfig+0x938>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a4b      	ldr	r2, [pc, #300]	; (80018b0 <HAL_RCC_OscConfig+0x938>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001788:	f7ff f92a 	bl	80009e0 <HAL_GetTick>
 800178c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff f925 	bl	80009e0 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e2e9      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <HAL_RCC_OscConfig+0x938>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0ef      	beq.n	8001792 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x852>
 80017bc:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4a39      	ldr	r2, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6213      	str	r3, [r2, #32]
 80017c8:	e02f      	b.n	800182a <HAL_RCC_OscConfig+0x8b2>
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10c      	bne.n	80017ee <HAL_RCC_OscConfig+0x876>
 80017d4:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	e01d      	b.n	800182a <HAL_RCC_OscConfig+0x8b2>
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x89a>
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x8b2>
 8001812:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d06b      	beq.n	800190c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f8d4 	bl	80009e0 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff f8cf 	bl	80009e0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e291      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 8001856:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001884:	601a      	str	r2, [r3, #0]
  return result;
 8001886:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800188a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d109      	bne.n	80018b4 <HAL_RCC_OscConfig+0x93c>
 80018a0:	4b01      	ldr	r3, [pc, #4]	; (80018a8 <HAL_RCC_OscConfig+0x930>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x958>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	10908120 	.word	0x10908120
 80018b0:	40007000 	.word	0x40007000
 80018b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	4bbb      	ldr	r3, [pc, #748]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018d4:	2102      	movs	r1, #2
 80018d6:	6011      	str	r1, [r2, #0]
 80018d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	fa92 f1a2 	rbit	r1, r2
 80018e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018e6:	6011      	str	r1, [r2, #0]
  return result;
 80018e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d099      	beq.n	800183e <HAL_RCC_OscConfig+0x8c6>
 800190a:	e063      	b.n	80019d4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff f868 	bl	80009e0 <HAL_GetTick>
 8001910:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	e00b      	b.n	800192e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f863 	bl	80009e0 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e225      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 800192e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800194a:	2202      	movs	r2, #2
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800195c:	601a      	str	r2, [r3, #0]
  return result;
 800195e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001962:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d102      	bne.n	800197e <HAL_RCC_OscConfig+0xa06>
 8001978:	4b90      	ldr	r3, [pc, #576]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	e00d      	b.n	800199a <HAL_RCC_OscConfig+0xa22>
 800197e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001982:	2202      	movs	r2, #2
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800199e:	2102      	movs	r1, #2
 80019a0:	6011      	str	r1, [r2, #0]
 80019a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fa92 f1a2 	rbit	r1, r2
 80019ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019b0:	6011      	str	r1, [r2, #0]
  return result;
 80019b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f002 021f 	and.w	r2, r2, #31
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1a0      	bne.n	8001916 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b77      	ldr	r3, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	4a76      	ldr	r2, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 80019e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 81c2 	beq.w	8001d78 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b71      	ldr	r3, [pc, #452]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	f000 819c 	beq.w	8001d3a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	f040 8114 	bne.w	8001c36 <HAL_RCC_OscConfig+0xcbe>
 8001a0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a26:	601a      	str	r2, [r3, #0]
  return result;
 8001a28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe ffcc 	bl	80009e0 <HAL_GetTick>
 8001a48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7fe ffc7 	bl	80009e0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e18b      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 8001a62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a7a:	601a      	str	r2, [r3, #0]
  return result;
 8001a7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0xb24>
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb5c>
 8001a9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ad8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	fa92 f1a2 	rbit	r1, r2
 8001ae8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001aec:	6011      	str	r1, [r2, #0]
  return result;
 8001aee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d19e      	bne.n	8001a4e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	4925      	ldr	r1, [pc, #148]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b44:	601a      	str	r2, [r3, #0]
  return result;
 8001b46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b4a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7fe ff3d 	bl	80009e0 <HAL_GetTick>
 8001b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6a:	e009      	b.n	8001b80 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ff38 	bl	80009e0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0fc      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 8001b80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b98:	601a      	str	r2, [r3, #0]
  return result;
 8001b9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xc48>
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <HAL_RCC_OscConfig+0xc44>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e01e      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc80>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_OscConfig+0xe0c>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c00:	6011      	str	r1, [r2, #0]
 8001c02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	fa92 f1a2 	rbit	r1, r2
 8001c0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c10:	6011      	str	r1, [r2, #0]
  return result;
 8001c12:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	f002 021f 	and.w	r2, r2, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d09b      	beq.n	8001b6c <HAL_RCC_OscConfig+0xbf4>
 8001c34:	e0a0      	b.n	8001d78 <HAL_RCC_OscConfig+0xe00>
 8001c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe feb8 	bl	80009e0 <HAL_GetTick>
 8001c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe feb3 	bl	80009e0 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e077      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
 8001c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xd4c>
 8001cbe:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_OscConfig+0xe0c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd84>
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f107 0318 	add.w	r3, r7, #24
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_OscConfig+0xe0c>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d04:	6011      	str	r1, [r2, #0]
 8001d06:	f107 0210 	add.w	r2, r7, #16
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	fa92 f1a2 	rbit	r1, r2
 8001d10:	f107 020c 	add.w	r2, r7, #12
 8001d14:	6011      	str	r1, [r2, #0]
  return result;
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d19e      	bne.n	8001c76 <HAL_RCC_OscConfig+0xcfe>
 8001d38:	e01e      	b.n	8001d78 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_RCC_OscConfig+0xe0c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09e      	sub	sp, #120	; 0x78
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e162      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	498b      	ldr	r1, [pc, #556]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e14a      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	497f      	ldr	r1, [pc, #508]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80dc 	beq.w	8001fb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d13c      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xf6>
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xa6>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e00f      	b.n	8001e4e <HAL_RCC_ClockConfig+0xc6>
 8001e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
 8001e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e52:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e5e:	fab2 f282 	clz	r2, r2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f042 0220 	orr.w	r2, r2, #32
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f002 021f 	and.w	r2, r2, #31
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d17b      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0f3      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d13c      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x178>
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x128>
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
 8001eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ecc:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d13a      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b2      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
 8001f00:	2302      	movs	r3, #2
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e00d      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1bc>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2202      	movs	r2, #2
 8001f46:	61ba      	str	r2, [r7, #24]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	fa92 f2a2 	rbit	r2, r2
 8001f4e:	617a      	str	r2, [r7, #20]
  return result;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e079      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fd2c 	bl	80009e0 <HAL_GetTick>
 8001f88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe fd28 	bl	80009e0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e061      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d214      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e040      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	491a      	ldr	r1, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4912      	ldr	r1, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800202a:	f000 f85d 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800202e:	4601      	mov	r1, r0
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	22f0      	movs	r2, #240	; 0xf0
 800203a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	60fa      	str	r2, [r7, #12]
  return result;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	40d3      	lsrs	r3, r2
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x2ec>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	fa21 f303 	lsr.w	r3, r1, r3
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_RCC_ClockConfig+0x2f0>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_RCC_ClockConfig+0x2f4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fc7a 	bl	8000958 <HAL_InitTick>
  
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3778      	adds	r7, #120	; 0x78
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	08003fdc 	.word	0x08003fdc
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_RCC_MCOConfig+0x64>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_RCC_MCOConfig+0x64>)
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	6153      	str	r3, [r2, #20]
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_MCOConfig+0x64>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f7fe fdce 	bl	8000c64 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_MCOConfig+0x64>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_MCOConfig+0x64>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b08b      	sub	sp, #44	; 0x2c
 80020ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x30>
 8002112:	2b08      	cmp	r3, #8
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x36>
 8002116:	e03c      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e03c      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002124:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002128:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	fa92 f2a2 	rbit	r2, r2
 8002130:	607a      	str	r2, [r7, #4]
  return result;
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	40d3      	lsrs	r3, r2
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	220f      	movs	r2, #15
 800214c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	60fa      	str	r2, [r7, #12]
  return result;
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	40d3      	lsrs	r3, r2
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	fbb2 f2f3 	udiv	r2, r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
 8002180:	e004      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	623b      	str	r3, [r7, #32]
      break;
 8002190:	e002      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002194:	623b      	str	r3, [r7, #32]
      break;
 8002196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002198:	6a3b      	ldr	r3, [r7, #32]
}
 800219a:	4618      	mov	r0, r3
 800219c:	372c      	adds	r7, #44	; 0x2c
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	08003fec 	.word	0x08003fec
 80021b4:	08003ffc 	.word	0x08003ffc
 80021b8:	003d0900 	.word	0x003d0900

080021bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b092      	sub	sp, #72	; 0x48
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80d4 	beq.w	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10e      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
 80021f8:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b45      	ldr	r3, [pc, #276]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a41      	ldr	r2, [pc, #260]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe fbdd 	bl	80009e0 <HAL_GetTick>
 8002226:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe fbd9 	bl	80009e0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	; 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e13c      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8084 	beq.w	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002262:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002264:	429a      	cmp	r2, r3
 8002266:	d07c      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	461a      	mov	r2, r3
 80022b6:	2300      	movs	r3, #0
 80022b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d04b      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fb89 	bl	80009e0 <HAL_GetTick>
 80022ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fb85 	bl	80009e0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0e6      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80022e8:	2302      	movs	r3, #2
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002300:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d108      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002316:	4b01      	ldr	r3, [pc, #4]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	e00d      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	10908100 	.word	0x10908100
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	4b62      	ldr	r3, [pc, #392]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2202      	movs	r2, #2
 800233a:	613a      	str	r2, [r7, #16]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	60fa      	str	r2, [r7, #12]
  return result;
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0b7      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002362:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4954      	ldr	r1, [pc, #336]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002370:	4313      	orrs	r3, r2
 8002372:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f023 0203 	bic.w	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4947      	ldr	r1, [pc, #284]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b2:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f023 0210 	bic.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4940      	ldr	r1, [pc, #256]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f023 0220 	bic.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4938      	ldr	r1, [pc, #224]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4931      	ldr	r1, [pc, #196]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800240c:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4929      	ldr	r1, [pc, #164]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002438:	4313      	orrs	r3, r2
 800243a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	491a      	ldr	r1, [pc, #104]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002456:	4313      	orrs	r3, r2
 8002458:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	4913      	ldr	r1, [pc, #76]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002474:	4313      	orrs	r3, r2
 8002476:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	490b      	ldr	r1, [pc, #44]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002492:	4313      	orrs	r3, r2
 8002494:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3748      	adds	r7, #72	; 0x48
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e049      	b.n	800256a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe f92e 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f000 ff56 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d001      	beq.n	800258c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e033      	b.n	80025f4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_TIM_Base_Start+0x8c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIM_Base_Start+0x3e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d004      	beq.n	80025b2 <HAL_TIM_Base_Start+0x3e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_TIM_Base_Start+0x90>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d115      	bne.n	80025de <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_TIM_Base_Start+0x94>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d015      	beq.n	80025f0 <HAL_TIM_Base_Start+0x7c>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d011      	beq.n	80025f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	e008      	b.n	80025f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40014000 	.word	0x40014000
 8002608:	00010007 	.word	0x00010007

0800260c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e049      	b.n	80026b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe f86a 	bl	800070c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 feb2 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x24>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e03c      	b.n	800275a <HAL_TIM_PWM_Start+0x9e>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d109      	bne.n	80026fa <HAL_TIM_PWM_Start+0x3e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e02f      	b.n	800275a <HAL_TIM_PWM_Start+0x9e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d109      	bne.n	8002714 <HAL_TIM_PWM_Start+0x58>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e022      	b.n	800275a <HAL_TIM_PWM_Start+0x9e>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d109      	bne.n	800272e <HAL_TIM_PWM_Start+0x72>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	e015      	b.n	800275a <HAL_TIM_PWM_Start+0x9e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d109      	bne.n	8002748 <HAL_TIM_PWM_Start+0x8c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e008      	b.n	800275a <HAL_TIM_PWM_Start+0x9e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e083      	b.n	800286a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_TIM_PWM_Start+0xb6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	e023      	b.n	80027ba <HAL_TIM_PWM_Start+0xfe>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d104      	bne.n	8002782 <HAL_TIM_PWM_Start+0xc6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	e01b      	b.n	80027ba <HAL_TIM_PWM_Start+0xfe>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d104      	bne.n	8002792 <HAL_TIM_PWM_Start+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002790:	e013      	b.n	80027ba <HAL_TIM_PWM_Start+0xfe>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d104      	bne.n	80027a2 <HAL_TIM_PWM_Start+0xe6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027a0:	e00b      	b.n	80027ba <HAL_TIM_PWM_Start+0xfe>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d104      	bne.n	80027b2 <HAL_TIM_PWM_Start+0xf6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b0:	e003      	b.n	80027ba <HAL_TIM_PWM_Start+0xfe>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fab0 	bl	8003d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a29      	ldr	r2, [pc, #164]	; (8002874 <HAL_TIM_PWM_Start+0x1b8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x134>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_TIM_PWM_Start+0x1bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x134>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a26      	ldr	r2, [pc, #152]	; (800287c <HAL_TIM_PWM_Start+0x1c0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x134>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a25      	ldr	r2, [pc, #148]	; (8002880 <HAL_TIM_PWM_Start+0x1c4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_TIM_PWM_Start+0x138>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_TIM_PWM_Start+0x13a>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_TIM_PWM_Start+0x1b8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_TIM_PWM_Start+0x16c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d004      	beq.n	8002828 <HAL_TIM_PWM_Start+0x16c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_TIM_PWM_Start+0x1bc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d115      	bne.n	8002854 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_TIM_PWM_Start+0x1c8>)
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b06      	cmp	r3, #6
 8002838:	d015      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1aa>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d011      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	e008      	b.n	8002866 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e000      	b.n	8002868 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40014000 	.word	0x40014000
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800
 8002884:	00010007 	.word	0x00010007

08002888 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e049      	b.n	800292e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f841 	bl	8002936 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 fd74 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <HAL_TIM_IC_Start_IT+0x1e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e023      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x66>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d104      	bne.n	800297a <HAL_TIM_IC_Start_IT+0x2e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01b      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x66>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d104      	bne.n	800298a <HAL_TIM_IC_Start_IT+0x3e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e013      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x66>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d104      	bne.n	800299a <HAL_TIM_IC_Start_IT+0x4e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e00b      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x66>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b10      	cmp	r3, #16
 800299e:	d104      	bne.n	80029aa <HAL_TIM_IC_Start_IT+0x5e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e003      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x66>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <HAL_TIM_IC_Start_IT+0x78>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e013      	b.n	80029ec <HAL_TIM_IC_Start_IT+0xa0>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d104      	bne.n	80029d4 <HAL_TIM_IC_Start_IT+0x88>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e00b      	b.n	80029ec <HAL_TIM_IC_Start_IT+0xa0>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d104      	bne.n	80029e4 <HAL_TIM_IC_Start_IT+0x98>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e003      	b.n	80029ec <HAL_TIM_IC_Start_IT+0xa0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029f4:	7b7b      	ldrb	r3, [r7, #13]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0c9      	b.n	8002b92 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_IC_Start_IT+0xc2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	e023      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x10a>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_IC_Start_IT+0xd2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a1c:	e01b      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x10a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0xe2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	e013      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x10a>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_IC_Start_IT+0xf2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x10a>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_IC_Start_IT+0x102>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a4c:	e003      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x10a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_IC_Start_IT+0x11a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	e013      	b.n	8002a8e <HAL_TIM_IC_Start_IT+0x142>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start_IT+0x12a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a74:	e00b      	b.n	8002a8e <HAL_TIM_IC_Start_IT+0x142>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_IC_Start_IT+0x13a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a84:	e003      	b.n	8002a8e <HAL_TIM_IC_Start_IT+0x142>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d841      	bhi.n	8002b18 <HAL_TIM_IC_Start_IT+0x1cc>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <HAL_TIM_IC_Start_IT+0x150>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002ad1 	.word	0x08002ad1
 8002aa0:	08002b19 	.word	0x08002b19
 8002aa4:	08002b19 	.word	0x08002b19
 8002aa8:	08002b19 	.word	0x08002b19
 8002aac:	08002ae3 	.word	0x08002ae3
 8002ab0:	08002b19 	.word	0x08002b19
 8002ab4:	08002b19 	.word	0x08002b19
 8002ab8:	08002b19 	.word	0x08002b19
 8002abc:	08002af5 	.word	0x08002af5
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b19 	.word	0x08002b19
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002b07 	.word	0x08002b07
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0202 	orr.w	r2, r2, #2
 8002ade:	60da      	str	r2, [r3, #12]
      break;
 8002ae0:	e01d      	b.n	8002b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0204 	orr.w	r2, r2, #4
 8002af0:	60da      	str	r2, [r3, #12]
      break;
 8002af2:	e014      	b.n	8002b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0208 	orr.w	r2, r2, #8
 8002b02:	60da      	str	r2, [r3, #12]
      break;
 8002b04:	e00b      	b.n	8002b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0210 	orr.w	r2, r2, #16
 8002b14:	60da      	str	r2, [r3, #12]
      break;
 8002b16:	e002      	b.n	8002b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d135      	bne.n	8002b90 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 f8fb 	bl	8003d28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_TIM_IC_Start_IT+0x250>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d009      	beq.n	8002b50 <HAL_TIM_IC_Start_IT+0x204>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d004      	beq.n	8002b50 <HAL_TIM_IC_Start_IT+0x204>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_TIM_IC_Start_IT+0x254>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d115      	bne.n	8002b7c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_TIM_IC_Start_IT+0x258>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d015      	beq.n	8002b8e <HAL_TIM_IC_Start_IT+0x242>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d011      	beq.n	8002b8e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	e008      	b.n	8002b8e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e000      	b.n	8002b90 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	00010007 	.word	0x00010007

08002ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0202 	mvn.w	r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fd12 	bl	8000614 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fbc0 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fbc7 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0204 	mvn.w	r2, #4
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd fce8 	bl	8000614 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fb96 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fb9d 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0208 	mvn.w	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd fcbe 	bl	8000614 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fb6c 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fb73 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0210 	mvn.w	r2, #16
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fc94 	bl	8000614 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fb42 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb49 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0201 	mvn.w	r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb1c 	bl	8003364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f001 f8f6 	bl	8003f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d66:	d10e      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d107      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f001 f8e9 	bl	8003f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d10e      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 faf7 	bl	80033a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d10e      	bne.n	8002dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d107      	bne.n	8002dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0220 	mvn.w	r2, #32
 8002dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f001 f8a9 	bl	8003f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e088      	b.n	8002f16 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11b      	bne.n	8002e4a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f000 fddb 	bl	80039dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 020c 	bic.w	r2, r2, #12
 8002e34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6999      	ldr	r1, [r3, #24]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	e060      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d11c      	bne.n	8002e8a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f000 fe41 	bl	8003ae6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
 8002e88:	e040      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f000 fe8e 	bl	8003bc0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020c 	bic.w	r2, r2, #12
 8002eb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69d9      	ldr	r1, [r3, #28]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
 8002ec6:	e021      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d11c      	bne.n	8002f08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f000 feab 	bl	8003c38 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ef0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	021a      	lsls	r2, r3, #8
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	61da      	str	r2, [r3, #28]
 8002f06:	e001      	b.n	8002f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0ff      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b14      	cmp	r3, #20
 8002f4a:	f200 80f0 	bhi.w	800312e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002fa9 	.word	0x08002fa9
 8002f58:	0800312f 	.word	0x0800312f
 8002f5c:	0800312f 	.word	0x0800312f
 8002f60:	0800312f 	.word	0x0800312f
 8002f64:	08002fe9 	.word	0x08002fe9
 8002f68:	0800312f 	.word	0x0800312f
 8002f6c:	0800312f 	.word	0x0800312f
 8002f70:	0800312f 	.word	0x0800312f
 8002f74:	0800302b 	.word	0x0800302b
 8002f78:	0800312f 	.word	0x0800312f
 8002f7c:	0800312f 	.word	0x0800312f
 8002f80:	0800312f 	.word	0x0800312f
 8002f84:	0800306b 	.word	0x0800306b
 8002f88:	0800312f 	.word	0x0800312f
 8002f8c:	0800312f 	.word	0x0800312f
 8002f90:	0800312f 	.word	0x0800312f
 8002f94:	080030ad 	.word	0x080030ad
 8002f98:	0800312f 	.word	0x0800312f
 8002f9c:	0800312f 	.word	0x0800312f
 8002fa0:	0800312f 	.word	0x0800312f
 8002fa4:	080030ed 	.word	0x080030ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fa6e 	bl	8003490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	619a      	str	r2, [r3, #24]
      break;
 8002fe6:	e0a5      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fad4 	bl	800359c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      break;
 8003028:	e084      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fb33 	bl	800369c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0208 	orr.w	r2, r2, #8
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	61da      	str	r2, [r3, #28]
      break;
 8003068:	e064      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fb91 	bl	8003798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
      break;
 80030aa:	e043      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fbd4 	bl	8003860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0208 	orr.w	r2, r2, #8
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0204 	bic.w	r2, r2, #4
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030ea:	e023      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fc12 	bl	800391c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003106:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800312c:	e002      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop

08003148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIM_ConfigClockSource+0x1c>
 8003160:	2302      	movs	r3, #2
 8003162:	e0b6      	b.n	80032d2 <HAL_TIM_ConfigClockSource+0x18a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d03e      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0xd8>
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a6:	f200 8087 	bhi.w	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	f000 8086 	beq.w	80032be <HAL_TIM_ConfigClockSource+0x176>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	d87f      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031b8:	2b70      	cmp	r3, #112	; 0x70
 80031ba:	d01a      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0xaa>
 80031bc:	2b70      	cmp	r3, #112	; 0x70
 80031be:	d87b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031c0:	2b60      	cmp	r3, #96	; 0x60
 80031c2:	d050      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x11e>
 80031c4:	2b60      	cmp	r3, #96	; 0x60
 80031c6:	d877      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031c8:	2b50      	cmp	r3, #80	; 0x50
 80031ca:	d03c      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0xfe>
 80031cc:	2b50      	cmp	r3, #80	; 0x50
 80031ce:	d873      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d058      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x13e>
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d86f      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d064      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031dc:	2b30      	cmp	r3, #48	; 0x30
 80031de:	d86b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d060      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d867      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d05c      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d05a      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031f0:	e062      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f000 fd71 	bl	8003ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	609a      	str	r2, [r3, #8]
      break;
 800321e:	e04f      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f000 fd5a 	bl	8003ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003242:	609a      	str	r2, [r3, #8]
      break;
 8003244:	e03c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	461a      	mov	r2, r3
 8003254:	f000 fc18 	bl	8003a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2150      	movs	r1, #80	; 0x50
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fd27 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 8003264:	e02c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	461a      	mov	r2, r3
 8003274:	f000 fc74 	bl	8003b60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2160      	movs	r1, #96	; 0x60
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fd17 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 8003284:	e01c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	461a      	mov	r2, r3
 8003294:	f000 fbf8 	bl	8003a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fd07 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 80032a4:	e00c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f000 fcfe 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 80032b6:	e003      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d831      	bhi.n	8003354 <HAL_TIM_ReadCapturedValue+0x78>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	08003355 	.word	0x08003355
 8003300:	08003355 	.word	0x08003355
 8003304:	08003355 	.word	0x08003355
 8003308:	08003337 	.word	0x08003337
 800330c:	08003355 	.word	0x08003355
 8003310:	08003355 	.word	0x08003355
 8003314:	08003355 	.word	0x08003355
 8003318:	08003341 	.word	0x08003341
 800331c:	08003355 	.word	0x08003355
 8003320:	08003355 	.word	0x08003355
 8003324:	08003355 	.word	0x08003355
 8003328:	0800334b 	.word	0x0800334b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	60fb      	str	r3, [r7, #12]

      break;
 8003334:	e00f      	b.n	8003356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60fb      	str	r3, [r7, #12]

      break;
 800333e:	e00a      	b.n	8003356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	60fb      	str	r3, [r7, #12]

      break;
 8003348:	e005      	b.n	8003356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	60fb      	str	r3, [r7, #12]

      break;
 8003352:	e000      	b.n	8003356 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003354:	bf00      	nop
  }

  return tmpreg;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <TIM_Base_SetConfig+0xcc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0x20>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d108      	bne.n	80033e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a25      	ldr	r2, [pc, #148]	; (8003480 <TIM_Base_SetConfig+0xcc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0x5a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0x5a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a22      	ldr	r2, [pc, #136]	; (8003484 <TIM_Base_SetConfig+0xd0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0x5a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <TIM_Base_SetConfig+0xd4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0x5a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <TIM_Base_SetConfig+0xd8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <TIM_Base_SetConfig+0xcc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0xb0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <TIM_Base_SetConfig+0xd0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <TIM_Base_SetConfig+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <TIM_Base_SetConfig+0xd8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800

08003490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 0302 	bic.w	r3, r3, #2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a28      	ldr	r2, [pc, #160]	; (800358c <TIM_OC1_SetConfig+0xfc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_OC1_SetConfig+0x78>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a27      	ldr	r2, [pc, #156]	; (8003590 <TIM_OC1_SetConfig+0x100>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_OC1_SetConfig+0x78>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_OC1_SetConfig+0x104>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_OC1_SetConfig+0x78>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_OC1_SetConfig+0x108>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10c      	bne.n	8003522 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0308 	bic.w	r3, r3, #8
 800350e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <TIM_OC1_SetConfig+0xfc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00b      	beq.n	8003542 <TIM_OC1_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <TIM_OC1_SetConfig+0x100>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <TIM_OC1_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <TIM_OC1_SetConfig+0x104>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <TIM_OC1_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a16      	ldr	r2, [pc, #88]	; (8003598 <TIM_OC1_SetConfig+0x108>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d111      	bne.n	8003566 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	621a      	str	r2, [r3, #32]
}
 8003580:	bf00      	nop
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f023 0210 	bic.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0320 	bic.w	r3, r3, #32
 80035ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <TIM_OC2_SetConfig+0xf0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10d      	bne.n	800361c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800361a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <TIM_OC2_SetConfig+0xf0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_OC2_SetConfig+0xa0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <TIM_OC2_SetConfig+0xf4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_OC2_SetConfig+0xa0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a19      	ldr	r2, [pc, #100]	; (8003694 <TIM_OC2_SetConfig+0xf8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_OC2_SetConfig+0xa0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <TIM_OC2_SetConfig+0xfc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d113      	bne.n	8003664 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003642:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800364a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800

0800369c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <TIM_OC3_SetConfig+0xec>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10d      	bne.n	800371a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003718:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <TIM_OC3_SetConfig+0xec>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_OC3_SetConfig+0x9e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <TIM_OC3_SetConfig+0xf0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_OC3_SetConfig+0x9e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <TIM_OC3_SetConfig+0xf4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC3_SetConfig+0x9e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a17      	ldr	r2, [pc, #92]	; (8003794 <TIM_OC3_SetConfig+0xf8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d113      	bne.n	8003762 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800

08003798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a16      	ldr	r2, [pc, #88]	; (8003850 <TIM_OC4_SetConfig+0xb8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_OC4_SetConfig+0x7c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <TIM_OC4_SetConfig+0xbc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_OC4_SetConfig+0x7c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <TIM_OC4_SetConfig+0xc0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC4_SetConfig+0x7c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a13      	ldr	r2, [pc, #76]	; (800385c <TIM_OC4_SetConfig+0xc4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d109      	bne.n	8003828 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <TIM_OC5_SetConfig+0xac>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_OC5_SetConfig+0x72>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <TIM_OC5_SetConfig+0xb0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <TIM_OC5_SetConfig+0x72>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <TIM_OC5_SetConfig+0xb4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC5_SetConfig+0x72>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <TIM_OC5_SetConfig+0xb8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d109      	bne.n	80038e6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	621a      	str	r2, [r3, #32]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	051b      	lsls	r3, r3, #20
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a16      	ldr	r2, [pc, #88]	; (80039cc <TIM_OC6_SetConfig+0xb0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_OC6_SetConfig+0x74>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <TIM_OC6_SetConfig+0xb4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_OC6_SetConfig+0x74>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <TIM_OC6_SetConfig+0xb8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC6_SetConfig+0x74>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <TIM_OC6_SetConfig+0xbc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d109      	bne.n	80039a4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	029b      	lsls	r3, r3, #10
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800

080039dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <TIM_TI1_SetConfig+0xa4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_TI1_SetConfig+0x3e>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d003      	beq.n	8003a1a <TIM_TI1_SetConfig+0x3e>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <TIM_TI1_SetConfig+0xa8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <TIM_TI1_SetConfig+0x42>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <TIM_TI1_SetConfig+0x44>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e003      	b.n	8003a3e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f023 030a 	bic.w	r3, r3, #10
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f003 030a 	and.w	r3, r3, #10
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40014000 	.word	0x40014000

08003a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0201 	bic.w	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f023 030a 	bic.w	r3, r3, #10
 8003ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b087      	sub	sp, #28
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f023 0210 	bic.w	r2, r3, #16
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	031b      	lsls	r3, r3, #12
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f023 0210 	bic.w	r2, r3, #16
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	031b      	lsls	r3, r3, #12
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	621a      	str	r2, [r3, #32]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 0303 	bic.w	r3, r3, #3
 8003bec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	031b      	lsls	r3, r3, #12
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	031b      	lsls	r3, r3, #12
 8003c90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f043 0307 	orr.w	r3, r3, #7
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	021a      	lsls	r2, r3, #8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e04f      	b.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d108      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d004      	beq.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10c      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40014000 	.word	0x40014000

08003e40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e060      	b.n	8003f1e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d115      	bne.n	8003f0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	051b      	lsls	r3, r3, #20
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00

08003f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4d0d      	ldr	r5, [pc, #52]	; (8003fa4 <__libc_init_array+0x38>)
 8003f70:	4c0d      	ldr	r4, [pc, #52]	; (8003fa8 <__libc_init_array+0x3c>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	2600      	movs	r6, #0
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	4d0b      	ldr	r5, [pc, #44]	; (8003fac <__libc_init_array+0x40>)
 8003f7e:	4c0c      	ldr	r4, [pc, #48]	; (8003fb0 <__libc_init_array+0x44>)
 8003f80:	f000 f820 	bl	8003fc4 <_init>
 8003f84:	1b64      	subs	r4, r4, r5
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	2600      	movs	r6, #0
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	0800400c 	.word	0x0800400c
 8003fa8:	0800400c 	.word	0x0800400c
 8003fac:	0800400c 	.word	0x0800400c
 8003fb0:	08004010 	.word	0x08004010

08003fb4 <memset>:
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
